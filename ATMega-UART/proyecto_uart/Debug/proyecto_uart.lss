
proyecto_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000012d4  00001368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c6  00800138  00800138  000013a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f5  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00002f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  000036c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e7  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000691  00000000  00000000  00003e93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_18>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_20>
      54:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_21>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	f8 01       	movw	r30, r16
      6a:	1e 02       	muls	r17, r30
      6c:	32 02       	muls	r19, r18
      6e:	46 02       	muls	r20, r22
      70:	5a 02       	muls	r21, r26
      72:	6e 02       	muls	r22, r30
      74:	82 02       	muls	r24, r18
      76:	0b 02       	muls	r16, r27

00000078 <__trampolines_end>:
      78:	6e 61       	ori	r22, 0x1E	; 30
      7a:	6e 00       	.word	0x006e	; ????

0000007c <__c.2332>:
      7c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      8c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      9c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     10c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     11c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     12c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     13c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     14c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     15c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     16c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	e4 ed       	ldi	r30, 0xD4	; 212
     18e:	f2 e1       	ldi	r31, 0x12	; 18
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a8 33       	cpi	r26, 0x38	; 56
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	a8 e3       	ldi	r26, 0x38	; 56
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	ae 3f       	cpi	r26, 0xFE	; 254
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
     1b0:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <__vector_21>:
void adc_pin_enable(uint8_t pin) {
	DIDR0 |= (1 << pin);
}

void adc_pin_disable(uint8_t pin) {
	DIDR0 &= ~(1 << pin);
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	8f 93       	push	r24
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     1ca:	8f 91       	pop	r24
     1cc:	0f 90       	pop	r0
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	0f 90       	pop	r0
     1d2:	1f 90       	pop	r1
     1d4:	18 95       	reti

000001d6 <adc_init>:
     1d6:	ec e7       	ldi	r30, 0x7C	; 124
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	80 81       	ld	r24, Z
     1dc:	80 64       	ori	r24, 0x40	; 64
     1de:	80 83       	st	Z, r24
     1e0:	ea e7       	ldi	r30, 0x7A	; 122
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	8f 68       	ori	r24, 0x8F	; 143
     1e8:	80 83       	st	Z, r24
     1ea:	08 95       	ret

000001ec <adc_pin_enable>:
     1ec:	ee e7       	ldi	r30, 0x7E	; 126
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	90 81       	ld	r25, Z
     1f2:	21 e0       	ldi	r18, 0x01	; 1
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <adc_pin_enable+0x10>
     1f8:	22 0f       	add	r18, r18
     1fa:	33 1f       	adc	r19, r19
     1fc:	8a 95       	dec	r24
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <adc_pin_enable+0xc>
     200:	29 2b       	or	r18, r25
     202:	20 83       	st	Z, r18
     204:	08 95       	ret

00000206 <adc_pin_select>:
}

void adc_pin_select(uint8_t source) {
	ADMUX &= 0xF0;
     206:	ec e7       	ldi	r30, 0x7C	; 124
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	90 81       	ld	r25, Z
     20c:	90 7f       	andi	r25, 0xF0	; 240
     20e:	90 83       	st	Z, r25
	ADMUX |= source;
     210:	90 81       	ld	r25, Z
     212:	89 2b       	or	r24, r25
     214:	80 83       	st	Z, r24
     216:	08 95       	ret

00000218 <adc_convert>:

uint16_t adc_convert(void) {
	uint8_t adcl = 0;
	uint8_t adch = 0;
	
	adc_convert_done = 0;
     218:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	
	ADCSRA |= (1 << ADSC);
     21c:	ea e7       	ldi	r30, 0x7A	; 122
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	80 64       	ori	r24, 0x40	; 64
     224:	80 83       	st	Z, r24
	while(adc_convert_done == 0);
     226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     22a:	88 23       	and	r24, r24
     22c:	e1 f3       	breq	.-8      	; 0x226 <adc_convert+0xe>
	
	adcl = ADCL;
     22e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	adch = ADCH;
     232:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	
	return (adch << 8 | adcl);
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	92 2b       	or	r25, r18
     23a:	08 95       	ret

0000023c <ask_value_to_enum>:
	ASS2,
	APB	
} ASK;

// ¿Para facilitar la lectura?
ASK ask_value_to_enum(char* ask_value) {
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ec 01       	movw	r28, r24
	if (strncmp(ask_value, "bar", 3) == 0) {
     242:	43 e0       	ldi	r20, 0x03	; 3
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	62 e0       	ldi	r22, 0x02	; 2
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     24e:	89 2b       	or	r24, r25
     250:	09 f4       	brne	.+2      	; 0x254 <ask_value_to_enum+0x18>
     252:	41 c0       	rjmp	.+130    	; 0x2d6 <ask_value_to_enum+0x9a>
		return BAR;
	}
	else if (strncmp(ask_value, "lu1", 3) == 0) {
     254:	43 e0       	ldi	r20, 0x03	; 3
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	66 e0       	ldi	r22, 0x06	; 6
     25a:	71 e0       	ldi	r23, 0x01	; 1
     25c:	ce 01       	movw	r24, r28
     25e:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     262:	89 2b       	or	r24, r25
     264:	d1 f1       	breq	.+116    	; 0x2da <ask_value_to_enum+0x9e>
		return LUM1;
	}
	else if (strncmp(ask_value, "lu2", 3) == 0) {
     266:	43 e0       	ldi	r20, 0x03	; 3
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	6a e0       	ldi	r22, 0x0A	; 10
     26c:	71 e0       	ldi	r23, 0x01	; 1
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     274:	89 2b       	or	r24, r25
     276:	99 f1       	breq	.+102    	; 0x2de <ask_value_to_enum+0xa2>
		return LUM2;
	}
	else if (strncmp(ask_value, "lu3", 3) == 0) {
     278:	43 e0       	ldi	r20, 0x03	; 3
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	6e e0       	ldi	r22, 0x0E	; 14
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	ce 01       	movw	r24, r28
     282:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     286:	89 2b       	or	r24, r25
     288:	61 f1       	breq	.+88     	; 0x2e2 <ask_value_to_enum+0xa6>
		return LUM3;
	}
	else if (strncmp(ask_value, "lu4", 3) == 0) {
     28a:	43 e0       	ldi	r20, 0x03	; 3
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	62 e1       	ldi	r22, 0x12	; 18
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	ce 01       	movw	r24, r28
     294:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     298:	89 2b       	or	r24, r25
     29a:	29 f1       	breq	.+74     	; 0x2e6 <ask_value_to_enum+0xaa>
		return LUM4;
	}
	else if (strncmp(ask_value, "as1", 3) == 0) {
     29c:	43 e0       	ldi	r20, 0x03	; 3
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	66 e1       	ldi	r22, 0x16	; 22
     2a2:	71 e0       	ldi	r23, 0x01	; 1
     2a4:	ce 01       	movw	r24, r28
     2a6:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     2aa:	89 2b       	or	r24, r25
     2ac:	f1 f0       	breq	.+60     	; 0x2ea <ask_value_to_enum+0xae>
		return ASS1;
	}
	else if (strncmp(ask_value, "as2", 3) == 0) {
     2ae:	43 e0       	ldi	r20, 0x03	; 3
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	6a e1       	ldi	r22, 0x1A	; 26
     2b4:	71 e0       	ldi	r23, 0x01	; 1
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     2bc:	89 2b       	or	r24, r25
     2be:	b9 f0       	breq	.+46     	; 0x2ee <ask_value_to_enum+0xb2>
		return ASS2;
	}
	else if (strncmp(ask_value, "apb", 3) == 0) {
     2c0:	43 e0       	ldi	r20, 0x03	; 3
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	6e e1       	ldi	r22, 0x1E	; 30
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	ce 01       	movw	r24, r28
     2ca:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     2ce:	89 2b       	or	r24, r25
     2d0:	81 f0       	breq	.+32     	; 0x2f2 <ask_value_to_enum+0xb6>
		return APB;
	}
	else {
		return NONE;
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0f c0       	rjmp	.+30     	; 0x2f4 <ask_value_to_enum+0xb8>
} ASK;

// ¿Para facilitar la lectura?
ASK ask_value_to_enum(char* ask_value) {
	if (strncmp(ask_value, "bar", 3) == 0) {
		return BAR;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0d c0       	rjmp	.+26     	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "lu1", 3) == 0) {
		return LUM1;
     2da:	82 e0       	ldi	r24, 0x02	; 2
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "lu2", 3) == 0) {
		return LUM2;
     2de:	83 e0       	ldi	r24, 0x03	; 3
     2e0:	09 c0       	rjmp	.+18     	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "lu3", 3) == 0) {
		return LUM3;
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "lu4", 3) == 0) {
		return LUM4;
     2e6:	85 e0       	ldi	r24, 0x05	; 5
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "as1", 3) == 0) {
		return ASS1;
     2ea:	86 e0       	ldi	r24, 0x06	; 6
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "as2", 3) == 0) {
		return ASS2;
     2ee:	87 e0       	ldi	r24, 0x07	; 7
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <ask_value_to_enum+0xb8>
	}
	else if (strncmp(ask_value, "apb", 3) == 0) {
		return APB;
     2f2:	88 e0       	ldi	r24, 0x08	; 8
	}
	else {
		return NONE;
	}
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <main>:

int main(void)
{
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	29 97       	sbiw	r28, 0x09	; 9
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
	uint8_t pin_value = 0;
	
	ASK ask_state = 0;
	
	// Inicializar PORTB
	DDRB = 0x02;	// PB1 como salida
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x60;	// PD5, PD6 como salida
     312:	80 e6       	ldi	r24, 0x60	; 96
     314:	8a b9       	out	0x0a, r24	; 10
	
	// Inicializar UART (baudrate = 9600, single)
	uart_init(9600, 0);
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	60 e8       	ldi	r22, 0x80	; 128
     31a:	75 e2       	ldi	r23, 0x25	; 37
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 36 03 	call	0x66c	; 0x66c <uart_init>
	
	// Inicializar pines ADC
	adc_init();
     324:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <adc_init>
	adc_pin_enable(ADC0_PIN);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	adc_pin_enable(ADC1_PIN);
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	adc_pin_enable(ADC2_PIN);
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	adc_pin_enable(ADC3_PIN);
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	adc_pin_enable(ADC4_PIN);
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	adc_pin_enable(ADC5_PIN);
     346:	85 e0       	ldi	r24, 0x05	; 5
     348:	0e 94 f6 00 	call	0x1ec	; 0x1ec <adc_pin_enable>
	
	// Habilitar interrupciones
	sei();
     34c:	78 94       	sei
			// Enviar print_buffer
			uart_send_string(print_buffer);
		}
		else if (strncmp((char*)reading, "mux", 3) == 0) {
			// Meter en ask_value los ultimos 3 bytes
			sprintf((char*)ask_value, (char*)reading + 3);
     34e:	7e 01       	movw	r14, r28
     350:	87 e0       	ldi	r24, 0x07	; 7
     352:	e8 0e       	add	r14, r24
     354:	f1 1c       	adc	r15, r1
     356:	fe 01       	movw	r30, r28
     358:	31 96       	adiw	r30, 0x01	; 1
     35a:	6f 01       	movw	r12, r30
			
			// Limpiar print_buffer
			memset(print_buffer, 0, sizeof(print_buffer));
     35c:	08 e3       	ldi	r16, 0x38	; 56
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	68 94       	set
     362:	33 24       	eor	r3, r3
     364:	36 f8       	bld	r3, 6
					convert = adc_convert();
					sprintf((char*)print_buffer, "%u", convert);
				break;
				
				// En caso que no se haya pedido correctamente.
				default: sprintf((char*)print_buffer, "ERR"); break;
     366:	0f 2e       	mov	r0, r31
     368:	f5 e4       	ldi	r31, 0x45	; 69
     36a:	6f 2e       	mov	r6, r31
     36c:	f2 e5       	ldi	r31, 0x52	; 82
     36e:	7f 2e       	mov	r7, r31
     370:	f0 2d       	mov	r31, r0
     372:	0f 2e       	mov	r0, r31
     374:	f2 e5       	ldi	r31, 0x52	; 82
     376:	4f 2e       	mov	r4, r31
     378:	51 2c       	mov	r5, r1
     37a:	f0 2d       	mov	r31, r0
					sprintf((char*)print_buffer, "%u", convert);
				break;
				case ASS2:
					adc_pin_select(ADC5_PIN);
					convert = adc_convert();
					sprintf((char*)print_buffer, "%u", convert);
     37c:	0f 2e       	mov	r0, r31
     37e:	f9 e2       	ldi	r31, 0x29	; 41
     380:	af 2e       	mov	r10, r31
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	bf 2e       	mov	r11, r31
     386:	f0 2d       	mov	r31, r0
			ask_state = ask_value_to_enum((char*)ask_value);
			
			switch (ask_state) {
				// Estos dos son pines digitales, vienen de una compuerta AND.
				case BAR: pin_value = (PINB & (1 << PINB2)) >> PINB2; sprintf((char*)print_buffer, "%d", pin_value); break;
				case APB: pin_value = (PINB & (1 << PINB3)) >> PINB3; sprintf((char*)print_buffer, "%d", pin_value); break;
     388:	0f 2e       	mov	r0, r31
     38a:	f6 e2       	ldi	r31, 0x26	; 38
     38c:	8f 2e       	mov	r8, r31
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	9f 2e       	mov	r9, r31
     392:	f0 2d       	mov	r31, r0
	sei();
	
    while (1) 
    {
		// Esperar lectura de 6 bytes
		uart_wait_read_string(reading, len);
     394:	66 e0       	ldi	r22, 0x06	; 6
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	ce 01       	movw	r24, r28
     39a:	04 96       	adiw	r24, 0x04	; 4
     39c:	0e 94 99 03 	call	0x732	; 0x732 <uart_wait_read_string>
		
		// Entrar si los primeros 3 bytes son "ask"
		if (strncmp((char*)reading, "ask", 3) == 0) {
     3a0:	43 e0       	ldi	r20, 0x03	; 3
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	62 e2       	ldi	r22, 0x22	; 34
     3a6:	71 e0       	ldi	r23, 0x01	; 1
     3a8:	ce 01       	movw	r24, r28
     3aa:	04 96       	adiw	r24, 0x04	; 4
     3ac:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     3b0:	89 2b       	or	r24, r25
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0xbc>
     3b4:	c4 c0       	rjmp	.+392    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			// Meter en ask_value los ultimos 3 bytes
			sprintf((char*)ask_value, (char*)reading + 3);
     3b6:	ff 92       	push	r15
     3b8:	ef 92       	push	r14
     3ba:	df 92       	push	r13
     3bc:	cf 92       	push	r12
     3be:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
			
			// Limpiar print_buffer y convertir ask_value a una int (para usar un switch case)
			memset(print_buffer, 0, sizeof(print_buffer));
     3c2:	f8 01       	movw	r30, r16
     3c4:	83 2d       	mov	r24, r3
     3c6:	11 92       	st	Z+, r1
     3c8:	8a 95       	dec	r24
     3ca:	e9 f7       	brne	.-6      	; 0x3c6 <main+0xcc>
			ask_state = ask_value_to_enum((char*)ask_value);
     3cc:	c6 01       	movw	r24, r12
     3ce:	0e 94 1e 01 	call	0x23c	; 0x23c <ask_value_to_enum>
			
			switch (ask_state) {
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	fc 01       	movw	r30, r24
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	e8 30       	cpi	r30, 0x08	; 8
     3e2:	f1 05       	cpc	r31, r1
     3e4:	08 f0       	brcs	.+2      	; 0x3e8 <main+0xee>
     3e6:	a2 c0       	rjmp	.+324    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     3e8:	ec 5c       	subi	r30, 0xCC	; 204
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__tablejump2__>
				// Estos dos son pines digitales, vienen de una compuerta AND.
				case BAR: pin_value = (PINB & (1 << PINB2)) >> PINB2; sprintf((char*)print_buffer, "%d", pin_value); break;
     3f0:	83 b1       	in	r24, 0x03	; 3
     3f2:	82 fb       	bst	r24, 2
     3f4:	88 27       	eor	r24, r24
     3f6:	80 f9       	bld	r24, 0
     3f8:	1f 92       	push	r1
     3fa:	8f 93       	push	r24
     3fc:	9f 92       	push	r9
     3fe:	8f 92       	push	r8
     400:	1f 93       	push	r17
     402:	0f 93       	push	r16
     404:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	90 c0       	rjmp	.+288    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case APB: pin_value = (PINB & (1 << PINB3)) >> PINB3; sprintf((char*)print_buffer, "%d", pin_value); break;
     416:	83 b1       	in	r24, 0x03	; 3
     418:	83 fb       	bst	r24, 3
     41a:	88 27       	eor	r24, r24
     41c:	80 f9       	bld	r24, 0
     41e:	1f 92       	push	r1
     420:	8f 93       	push	r24
     422:	9f 92       	push	r9
     424:	8f 92       	push	r8
     426:	1f 93       	push	r17
     428:	0f 93       	push	r16
     42a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	7d c0       	rjmp	.+250    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				
				// Los que siguen son de entradas analogicas, vienen directo de los piezoelectricos.
				case LUM1: 
					adc_pin_select(ADC0_PIN);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     442:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	bf 92       	push	r11
     44c:	af 92       	push	r10
     44e:	1f 93       	push	r17
     450:	0f 93       	push	r16
     452:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
     462:	69 c0       	rjmp	.+210    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case LUM2:
					adc_pin_select(ADC1_PIN);
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     46a:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     46e:	9f 93       	push	r25
     470:	8f 93       	push	r24
     472:	bf 92       	push	r11
     474:	af 92       	push	r10
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	55 c0       	rjmp	.+170    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case LUM3:
					adc_pin_select(ADC2_PIN);
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     492:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	bf 92       	push	r11
     49c:	af 92       	push	r10
     49e:	1f 93       	push	r17
     4a0:	0f 93       	push	r16
     4a2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	41 c0       	rjmp	.+130    	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case LUM4:
					adc_pin_select(ADC3_PIN);
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     4ba:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     4be:	9f 93       	push	r25
     4c0:	8f 93       	push	r24
     4c2:	bf 92       	push	r11
     4c4:	af 92       	push	r10
     4c6:	1f 93       	push	r17
     4c8:	0f 93       	push	r16
     4ca:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	2d c0       	rjmp	.+90     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case ASS1:
					adc_pin_select(ADC4_PIN);
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     4e2:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	bf 92       	push	r11
     4ec:	af 92       	push	r10
     4ee:	1f 93       	push	r17
     4f0:	0f 93       	push	r16
     4f2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	19 c0       	rjmp	.+50     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				case ASS2:
					adc_pin_select(ADC5_PIN);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	0e 94 03 01 	call	0x206	; 0x206 <adc_pin_select>
					convert = adc_convert();
     50a:	0e 94 0c 01 	call	0x218	; 0x218 <adc_convert>
					sprintf((char*)print_buffer, "%u", convert);
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	bf 92       	push	r11
     514:	af 92       	push	r10
     516:	1f 93       	push	r17
     518:	0f 93       	push	r16
     51a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
				break;
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	05 c0       	rjmp	.+10     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
				
				// En caso que no se haya pedido correctamente.
				default: sprintf((char*)print_buffer, "ERR"); break;
     52c:	f8 01       	movw	r30, r16
     52e:	71 82       	std	Z+1, r7	; 0x01
     530:	60 82       	st	Z, r6
     532:	53 82       	std	Z+3, r5	; 0x03
     534:	42 82       	std	Z+2, r4	; 0x02
			}
			
			// Enviar print_buffer
			uart_send_string(print_buffer);
     536:	c8 01       	movw	r24, r16
     538:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_send_string>
     53c:	2b cf       	rjmp	.-426    	; 0x394 <main+0x9a>
		}
		else if (strncmp((char*)reading, "mux", 3) == 0) {
     53e:	43 e0       	ldi	r20, 0x03	; 3
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	6c e2       	ldi	r22, 0x2C	; 44
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	ce 01       	movw	r24, r28
     548:	04 96       	adiw	r24, 0x04	; 4
     54a:	0e 94 93 08 	call	0x1126	; 0x1126 <strncmp>
     54e:	89 2b       	or	r24, r25
     550:	09 f0       	breq	.+2      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     552:	20 cf       	rjmp	.-448    	; 0x394 <main+0x9a>
			// Meter en ask_value los ultimos 3 bytes
			sprintf((char*)ask_value, (char*)reading + 3);
     554:	ff 92       	push	r15
     556:	ef 92       	push	r14
     558:	df 92       	push	r13
     55a:	cf 92       	push	r12
     55c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <sprintf>
			
			// Limpiar print_buffer
			memset(print_buffer, 0, sizeof(print_buffer));
     560:	f8 01       	movw	r30, r16
     562:	83 2d       	mov	r24, r3
     564:	11 92       	st	Z+, r1
     566:	8a 95       	dec	r24
     568:	e9 f7       	brne	.-6      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
			unsigned int i = 0;
			
			// Convertir y setear
			// MSB - Bit 2
			i = ask_value[0] - '0';
			PORTB ^= (-i ^ PORTB) & (1 << PINB1);
     56a:	35 b1       	in	r19, 0x05	; 5
     56c:	25 b1       	in	r18, 0x05	; 5
     56e:	99 81       	ldd	r25, Y+1	; 0x01
     570:	89 2f       	mov	r24, r25
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	c0 97       	sbiw	r24, 0x30	; 48
     576:	91 95       	neg	r25
     578:	81 95       	neg	r24
     57a:	91 09       	sbc	r25, r1
     57c:	83 27       	eor	r24, r19
     57e:	82 70       	andi	r24, 0x02	; 2
     580:	99 27       	eor	r25, r25
     582:	82 27       	eor	r24, r18
     584:	85 b9       	out	0x05, r24	; 5
			
			// Bit 1
			i = ask_value[1] - '0';
			PORTD ^= (-i ^ PORTD) & (1 << PIND6);
     586:	3b b1       	in	r19, 0x0b	; 11
     588:	2b b1       	in	r18, 0x0b	; 11
     58a:	9a 81       	ldd	r25, Y+2	; 0x02
     58c:	89 2f       	mov	r24, r25
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	c0 97       	sbiw	r24, 0x30	; 48
     592:	91 95       	neg	r25
     594:	81 95       	neg	r24
     596:	91 09       	sbc	r25, r1
     598:	83 27       	eor	r24, r19
     59a:	80 74       	andi	r24, 0x40	; 64
     59c:	99 27       	eor	r25, r25
     59e:	82 27       	eor	r24, r18
     5a0:	8b b9       	out	0x0b, r24	; 11
			
			// LSB - Bit 1
			i = ask_value[2] - '0';
			PORTD ^= (-i ^ PORTD) & (1 << PIND5);
     5a2:	3b b1       	in	r19, 0x0b	; 11
     5a4:	2b b1       	in	r18, 0x0b	; 11
     5a6:	9b 81       	ldd	r25, Y+3	; 0x03
     5a8:	89 2f       	mov	r24, r25
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	c0 97       	sbiw	r24, 0x30	; 48
     5ae:	91 95       	neg	r25
     5b0:	81 95       	neg	r24
     5b2:	91 09       	sbc	r25, r1
     5b4:	83 27       	eor	r24, r19
     5b6:	80 72       	andi	r24, 0x20	; 32
     5b8:	99 27       	eor	r25, r25
     5ba:	82 27       	eor	r24, r18
     5bc:	8b b9       	out	0x0b, r24	; 11
			
			// Enviar mensaje de confirmación
			sprintf((char*)print_buffer, "ADDRSET");
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	e0 e3       	ldi	r30, 0x30	; 48
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	d8 01       	movw	r26, r16
     5c6:	01 90       	ld	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	8a 95       	dec	r24
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
			uart_send_string(print_buffer);
     5ce:	c8 01       	movw	r24, r16
     5d0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <uart_send_string>
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	db ce       	rjmp	.-586    	; 0x394 <main+0x9a>

000005de <__vector_18>:
}

// Leer si hay datos en el buffer
uint16_t uart_read_count(void) {
	return rx_count;
}
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	ef 93       	push	r30
     5ee:	ff 93       	push	r31
     5f0:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <rx_write_pos.1753>
     5f4:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <rx_write_pos.1753+0x1>
     5f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     5fc:	e2 58       	subi	r30, 0x82	; 130
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	80 83       	st	Z, r24
     602:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_count>
     606:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_count+0x1>
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <rx_count+0x1>
     610:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_count>
     614:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_write_pos.1753>
     618:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <rx_write_pos.1753+0x1>
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <rx_write_pos.1753+0x1>
     622:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <rx_write_pos.1753>
     626:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_write_pos.1753>
     62a:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <rx_write_pos.1753+0x1>
     62e:	80 38       	cpi	r24, 0x80	; 128
     630:	91 05       	cpc	r25, r1
     632:	20 f0       	brcs	.+8      	; 0x63c <__vector_18+0x5e>
     634:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <rx_write_pos.1753+0x1>
     638:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_write_pos.1753>
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	0f 90       	pop	r0
     646:	0f be       	out	0x3f, r0	; 63
     648:	0f 90       	pop	r0
     64a:	1f 90       	pop	r1
     64c:	18 95       	reti

0000064e <__vector_20>:
     64e:	1f 92       	push	r1
     650:	0f 92       	push	r0
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	8f 93       	push	r24
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <uart_tx_busy>
     660:	8f 91       	pop	r24
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <uart_init>:
     66c:	44 23       	and	r20, r20
     66e:	39 f0       	breq	.+14     	; 0x67e <uart_init+0x12>
     670:	e0 ec       	ldi	r30, 0xC0	; 192
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	20 81       	ld	r18, Z
     676:	22 60       	ori	r18, 0x02	; 2
     678:	20 83       	st	Z, r18
     67a:	a8 e0       	ldi	r26, 0x08	; 8
     67c:	01 c0       	rjmp	.+2      	; 0x680 <uart_init+0x14>
     67e:	a0 e1       	ldi	r26, 0x10	; 16
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	0e 94 5f 07 	call	0xebe	; 0xebe <__muluhisi3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	74 e2       	ldi	r23, 0x24	; 36
     692:	84 ef       	ldi	r24, 0xF4	; 244
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 37 07 	call	0xe6e	; 0xe6e <__udivmodsi4>
     69a:	ba 01       	movw	r22, r20
     69c:	a9 01       	movw	r20, r18
     69e:	41 50       	subi	r20, 0x01	; 1
     6a0:	51 09       	sbc	r21, r1
     6a2:	61 09       	sbc	r22, r1
     6a4:	71 09       	sbc	r23, r1
     6a6:	bb 27       	eor	r27, r27
     6a8:	a7 2f       	mov	r26, r23
     6aa:	96 2f       	mov	r25, r22
     6ac:	85 2f       	mov	r24, r21
     6ae:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     6b2:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     6b6:	88 ed       	ldi	r24, 0xD8	; 216
     6b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     6c2:	08 95       	ret

000006c4 <uart_send_byte>:
     6c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <uart_tx_busy>
     6c8:	99 23       	and	r25, r25
     6ca:	e1 f3       	breq	.-8      	; 0x6c4 <uart_send_byte>
     6cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <uart_tx_busy>
     6d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     6d4:	08 95       	ret

000006d6 <uart_send_string>:
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	89 91       	ld	r24, Y+
     6de:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_send_byte>
     6e2:	88 81       	ld	r24, Y
     6e4:	81 11       	cpse	r24, r1
     6e6:	fa cf       	rjmp	.-12     	; 0x6dc <uart_send_string+0x6>
     6e8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <uart_send_byte>
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <uart_read>:
// Leer un byte del buffer
uint8_t uart_read(void) {
	static uint16_t rx_read_pos = 0;
	uint8_t data = 0;
	
	data = rx_buffer[rx_read_pos];
     6f2:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <rx_read_pos.1790>
     6f6:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <rx_read_pos.1790+0x1>
     6fa:	f9 01       	movw	r30, r18
     6fc:	e2 58       	subi	r30, 0x82	; 130
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	80 81       	ld	r24, Z
	rx_read_pos++;
     702:	2f 5f       	subi	r18, 0xFF	; 255
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <rx_read_pos.1790+0x1>
     70a:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <rx_read_pos.1790>
	rx_count--;
     70e:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <rx_count>
     712:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <rx_count+0x1>
     716:	41 50       	subi	r20, 0x01	; 1
     718:	51 09       	sbc	r21, r1
     71a:	50 93 7d 01 	sts	0x017D, r21	; 0x80017d <rx_count+0x1>
     71e:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <rx_count>
	if (rx_read_pos >= RX_BUFFER_SIZE) {
     722:	20 38       	cpi	r18, 0x80	; 128
     724:	31 05       	cpc	r19, r1
     726:	20 f0       	brcs	.+8      	; 0x730 <uart_read+0x3e>
		rx_read_pos = 0;
     728:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <rx_read_pos.1790+0x1>
     72c:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_read_pos.1790>
	}
	
	return data;
}
     730:	08 95       	ret

00000732 <uart_wait_read_string>:

// Leer 'len' bytes del buffer
void uart_wait_read_string(uint8_t* str, uint16_t len) {
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	7c 01       	movw	r14, r24
     740:	8b 01       	movw	r16, r22
	uint16_t i = 0;
     742:	c0 e0       	ldi	r28, 0x00	; 0
     744:	d0 e0       	ldi	r29, 0x00	; 0
	uart_send_byte(c[i]);
}

// Leer si hay datos en el buffer
uint16_t uart_read_count(void) {
	return rx_count;
     746:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_count>
     74a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_count+0x1>
// Leer 'len' bytes del buffer
void uart_wait_read_string(uint8_t* str, uint16_t len) {
	uint16_t i = 0;
	
	do {
		if (uart_read_count() > 0) {
     74e:	89 2b       	or	r24, r25
     750:	39 f0       	breq	.+14     	; 0x760 <uart_wait_read_string+0x2e>
			uint8_t c = uart_read();
     752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <uart_read>
			str[i] = c;
     756:	f7 01       	movw	r30, r14
     758:	ec 0f       	add	r30, r28
     75a:	fd 1f       	adc	r31, r29
     75c:	80 83       	st	Z, r24
			i++;
     75e:	21 96       	adiw	r28, 0x01	; 1
		}
	} while (i < len);
     760:	c0 17       	cp	r28, r16
     762:	d1 07       	cpc	r29, r17
     764:	80 f3       	brcs	.-32     	; 0x746 <uart_wait_read_string+0x14>
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	08 95       	ret

00000774 <vfprintf>:
     774:	a0 e1       	ldi	r26, 0x10	; 16
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e0 ec       	ldi	r30, 0xC0	; 192
     77a:	f3 e0       	ldi	r31, 0x03	; 3
     77c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__prologue_saves__>
     780:	7c 01       	movw	r14, r24
     782:	1b 01       	movw	r2, r22
     784:	6a 01       	movw	r12, r20
     786:	fc 01       	movw	r30, r24
     788:	17 82       	std	Z+7, r1	; 0x07
     78a:	16 82       	std	Z+6, r1	; 0x06
     78c:	83 81       	ldd	r24, Z+3	; 0x03
     78e:	81 ff       	sbrs	r24, 1
     790:	44 c3       	rjmp	.+1672   	; 0xe1a <__stack+0x51b>
     792:	9e 01       	movw	r18, r28
     794:	2f 5f       	subi	r18, 0xFF	; 255
     796:	3f 4f       	sbci	r19, 0xFF	; 255
     798:	39 01       	movw	r6, r18
     79a:	f7 01       	movw	r30, r14
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	f1 01       	movw	r30, r2
     7a0:	93 fd       	sbrc	r25, 3
     7a2:	85 91       	lpm	r24, Z+
     7a4:	93 ff       	sbrs	r25, 3
     7a6:	81 91       	ld	r24, Z+
     7a8:	1f 01       	movw	r2, r30
     7aa:	88 23       	and	r24, r24
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <vfprintf+0x3c>
     7ae:	31 c3       	rjmp	.+1634   	; 0xe12 <__stack+0x513>
     7b0:	85 32       	cpi	r24, 0x25	; 37
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <vfprintf+0x4e>
     7b4:	93 fd       	sbrc	r25, 3
     7b6:	85 91       	lpm	r24, Z+
     7b8:	93 ff       	sbrs	r25, 3
     7ba:	81 91       	ld	r24, Z+
     7bc:	1f 01       	movw	r2, r30
     7be:	85 32       	cpi	r24, 0x25	; 37
     7c0:	39 f4       	brne	.+14     	; 0x7d0 <vfprintf+0x5c>
     7c2:	b7 01       	movw	r22, r14
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     7ca:	56 01       	movw	r10, r12
     7cc:	65 01       	movw	r12, r10
     7ce:	e5 cf       	rjmp	.-54     	; 0x79a <vfprintf+0x26>
     7d0:	10 e0       	ldi	r17, 0x00	; 0
     7d2:	51 2c       	mov	r5, r1
     7d4:	91 2c       	mov	r9, r1
     7d6:	ff e1       	ldi	r31, 0x1F	; 31
     7d8:	f9 15       	cp	r31, r9
     7da:	d8 f0       	brcs	.+54     	; 0x812 <vfprintf+0x9e>
     7dc:	8b 32       	cpi	r24, 0x2B	; 43
     7de:	79 f0       	breq	.+30     	; 0x7fe <vfprintf+0x8a>
     7e0:	38 f4       	brcc	.+14     	; 0x7f0 <vfprintf+0x7c>
     7e2:	80 32       	cpi	r24, 0x20	; 32
     7e4:	79 f0       	breq	.+30     	; 0x804 <vfprintf+0x90>
     7e6:	83 32       	cpi	r24, 0x23	; 35
     7e8:	a1 f4       	brne	.+40     	; 0x812 <vfprintf+0x9e>
     7ea:	f9 2d       	mov	r31, r9
     7ec:	f0 61       	ori	r31, 0x10	; 16
     7ee:	2e c0       	rjmp	.+92     	; 0x84c <vfprintf+0xd8>
     7f0:	8d 32       	cpi	r24, 0x2D	; 45
     7f2:	61 f0       	breq	.+24     	; 0x80c <vfprintf+0x98>
     7f4:	80 33       	cpi	r24, 0x30	; 48
     7f6:	69 f4       	brne	.+26     	; 0x812 <vfprintf+0x9e>
     7f8:	29 2d       	mov	r18, r9
     7fa:	21 60       	ori	r18, 0x01	; 1
     7fc:	2d c0       	rjmp	.+90     	; 0x858 <vfprintf+0xe4>
     7fe:	39 2d       	mov	r19, r9
     800:	32 60       	ori	r19, 0x02	; 2
     802:	93 2e       	mov	r9, r19
     804:	89 2d       	mov	r24, r9
     806:	84 60       	ori	r24, 0x04	; 4
     808:	98 2e       	mov	r9, r24
     80a:	2a c0       	rjmp	.+84     	; 0x860 <vfprintf+0xec>
     80c:	e9 2d       	mov	r30, r9
     80e:	e8 60       	ori	r30, 0x08	; 8
     810:	15 c0       	rjmp	.+42     	; 0x83c <vfprintf+0xc8>
     812:	97 fc       	sbrc	r9, 7
     814:	2d c0       	rjmp	.+90     	; 0x870 <vfprintf+0xfc>
     816:	20 ed       	ldi	r18, 0xD0	; 208
     818:	28 0f       	add	r18, r24
     81a:	2a 30       	cpi	r18, 0x0A	; 10
     81c:	88 f4       	brcc	.+34     	; 0x840 <vfprintf+0xcc>
     81e:	96 fe       	sbrs	r9, 6
     820:	06 c0       	rjmp	.+12     	; 0x82e <vfprintf+0xba>
     822:	3a e0       	ldi	r19, 0x0A	; 10
     824:	13 9f       	mul	r17, r19
     826:	20 0d       	add	r18, r0
     828:	11 24       	eor	r1, r1
     82a:	12 2f       	mov	r17, r18
     82c:	19 c0       	rjmp	.+50     	; 0x860 <vfprintf+0xec>
     82e:	8a e0       	ldi	r24, 0x0A	; 10
     830:	58 9e       	mul	r5, r24
     832:	20 0d       	add	r18, r0
     834:	11 24       	eor	r1, r1
     836:	52 2e       	mov	r5, r18
     838:	e9 2d       	mov	r30, r9
     83a:	e0 62       	ori	r30, 0x20	; 32
     83c:	9e 2e       	mov	r9, r30
     83e:	10 c0       	rjmp	.+32     	; 0x860 <vfprintf+0xec>
     840:	8e 32       	cpi	r24, 0x2E	; 46
     842:	31 f4       	brne	.+12     	; 0x850 <vfprintf+0xdc>
     844:	96 fc       	sbrc	r9, 6
     846:	e5 c2       	rjmp	.+1482   	; 0xe12 <__stack+0x513>
     848:	f9 2d       	mov	r31, r9
     84a:	f0 64       	ori	r31, 0x40	; 64
     84c:	9f 2e       	mov	r9, r31
     84e:	08 c0       	rjmp	.+16     	; 0x860 <vfprintf+0xec>
     850:	8c 36       	cpi	r24, 0x6C	; 108
     852:	21 f4       	brne	.+8      	; 0x85c <vfprintf+0xe8>
     854:	29 2d       	mov	r18, r9
     856:	20 68       	ori	r18, 0x80	; 128
     858:	92 2e       	mov	r9, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <vfprintf+0xec>
     85c:	88 36       	cpi	r24, 0x68	; 104
     85e:	41 f4       	brne	.+16     	; 0x870 <vfprintf+0xfc>
     860:	f1 01       	movw	r30, r2
     862:	93 fd       	sbrc	r25, 3
     864:	85 91       	lpm	r24, Z+
     866:	93 ff       	sbrs	r25, 3
     868:	81 91       	ld	r24, Z+
     86a:	1f 01       	movw	r2, r30
     86c:	81 11       	cpse	r24, r1
     86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <vfprintf+0x62>
     870:	9b eb       	ldi	r25, 0xBB	; 187
     872:	98 0f       	add	r25, r24
     874:	93 30       	cpi	r25, 0x03	; 3
     876:	20 f4       	brcc	.+8      	; 0x880 <vfprintf+0x10c>
     878:	99 2d       	mov	r25, r9
     87a:	90 61       	ori	r25, 0x10	; 16
     87c:	80 5e       	subi	r24, 0xE0	; 224
     87e:	07 c0       	rjmp	.+14     	; 0x88e <vfprintf+0x11a>
     880:	9b e9       	ldi	r25, 0x9B	; 155
     882:	98 0f       	add	r25, r24
     884:	93 30       	cpi	r25, 0x03	; 3
     886:	08 f0       	brcs	.+2      	; 0x88a <vfprintf+0x116>
     888:	66 c1       	rjmp	.+716    	; 0xb56 <__stack+0x257>
     88a:	99 2d       	mov	r25, r9
     88c:	9f 7e       	andi	r25, 0xEF	; 239
     88e:	96 ff       	sbrs	r25, 6
     890:	16 e0       	ldi	r17, 0x06	; 6
     892:	9f 73       	andi	r25, 0x3F	; 63
     894:	99 2e       	mov	r9, r25
     896:	85 36       	cpi	r24, 0x65	; 101
     898:	19 f4       	brne	.+6      	; 0x8a0 <vfprintf+0x12c>
     89a:	90 64       	ori	r25, 0x40	; 64
     89c:	99 2e       	mov	r9, r25
     89e:	08 c0       	rjmp	.+16     	; 0x8b0 <vfprintf+0x13c>
     8a0:	86 36       	cpi	r24, 0x66	; 102
     8a2:	21 f4       	brne	.+8      	; 0x8ac <vfprintf+0x138>
     8a4:	39 2f       	mov	r19, r25
     8a6:	30 68       	ori	r19, 0x80	; 128
     8a8:	93 2e       	mov	r9, r19
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x13c>
     8ac:	11 11       	cpse	r17, r1
     8ae:	11 50       	subi	r17, 0x01	; 1
     8b0:	97 fe       	sbrs	r9, 7
     8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <vfprintf+0x14e>
     8b4:	1c 33       	cpi	r17, 0x3C	; 60
     8b6:	50 f4       	brcc	.+20     	; 0x8cc <vfprintf+0x158>
     8b8:	44 24       	eor	r4, r4
     8ba:	43 94       	inc	r4
     8bc:	41 0e       	add	r4, r17
     8be:	27 e0       	ldi	r18, 0x07	; 7
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <vfprintf+0x164>
     8c2:	18 30       	cpi	r17, 0x08	; 8
     8c4:	38 f0       	brcs	.+14     	; 0x8d4 <vfprintf+0x160>
     8c6:	27 e0       	ldi	r18, 0x07	; 7
     8c8:	17 e0       	ldi	r17, 0x07	; 7
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <vfprintf+0x162>
     8cc:	27 e0       	ldi	r18, 0x07	; 7
     8ce:	9c e3       	ldi	r25, 0x3C	; 60
     8d0:	49 2e       	mov	r4, r25
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x164>
     8d4:	21 2f       	mov	r18, r17
     8d6:	41 2c       	mov	r4, r1
     8d8:	56 01       	movw	r10, r12
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	a8 0e       	add	r10, r24
     8de:	b1 1c       	adc	r11, r1
     8e0:	f6 01       	movw	r30, r12
     8e2:	60 81       	ld	r22, Z
     8e4:	71 81       	ldd	r23, Z+1	; 0x01
     8e6:	82 81       	ldd	r24, Z+2	; 0x02
     8e8:	93 81       	ldd	r25, Z+3	; 0x03
     8ea:	04 2d       	mov	r16, r4
     8ec:	a3 01       	movw	r20, r6
     8ee:	0e 94 b0 07 	call	0xf60	; 0xf60 <__ftoa_engine>
     8f2:	6c 01       	movw	r12, r24
     8f4:	f9 81       	ldd	r31, Y+1	; 0x01
     8f6:	fc 87       	std	Y+12, r31	; 0x0c
     8f8:	f0 ff       	sbrs	r31, 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
     8fc:	f3 ff       	sbrs	r31, 3
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
     900:	91 fc       	sbrc	r9, 1
     902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
     904:	92 fe       	sbrs	r9, 2
     906:	06 c0       	rjmp	.+12     	; 0x914 <__stack+0x15>
     908:	00 e2       	ldi	r16, 0x20	; 32
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
     90c:	0d e2       	ldi	r16, 0x2D	; 45
     90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
     910:	0b e2       	ldi	r16, 0x2B	; 43
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
     914:	00 e0       	ldi	r16, 0x00	; 0
     916:	8c 85       	ldd	r24, Y+12	; 0x0c
     918:	8c 70       	andi	r24, 0x0C	; 12
     91a:	19 f0       	breq	.+6      	; 0x922 <__stack+0x23>
     91c:	01 11       	cpse	r16, r1
     91e:	5a c2       	rjmp	.+1204   	; 0xdd4 <__stack+0x4d5>
     920:	9b c2       	rjmp	.+1334   	; 0xe58 <__stack+0x559>
     922:	97 fe       	sbrs	r9, 7
     924:	10 c0       	rjmp	.+32     	; 0x946 <__stack+0x47>
     926:	4c 0c       	add	r4, r12
     928:	fc 85       	ldd	r31, Y+12	; 0x0c
     92a:	f4 ff       	sbrs	r31, 4
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0x37>
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	81 33       	cpi	r24, 0x31	; 49
     932:	09 f4       	brne	.+2      	; 0x936 <__stack+0x37>
     934:	4a 94       	dec	r4
     936:	14 14       	cp	r1, r4
     938:	74 f5       	brge	.+92     	; 0x996 <__stack+0x97>
     93a:	28 e0       	ldi	r18, 0x08	; 8
     93c:	24 15       	cp	r18, r4
     93e:	78 f5       	brcc	.+94     	; 0x99e <__stack+0x9f>
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	48 2e       	mov	r4, r24
     944:	2c c0       	rjmp	.+88     	; 0x99e <__stack+0x9f>
     946:	96 fc       	sbrc	r9, 6
     948:	2a c0       	rjmp	.+84     	; 0x99e <__stack+0x9f>
     94a:	81 2f       	mov	r24, r17
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	8c 15       	cp	r24, r12
     950:	9d 05       	cpc	r25, r13
     952:	9c f0       	brlt	.+38     	; 0x97a <__stack+0x7b>
     954:	3c ef       	ldi	r19, 0xFC	; 252
     956:	c3 16       	cp	r12, r19
     958:	3f ef       	ldi	r19, 0xFF	; 255
     95a:	d3 06       	cpc	r13, r19
     95c:	74 f0       	brlt	.+28     	; 0x97a <__stack+0x7b>
     95e:	89 2d       	mov	r24, r9
     960:	80 68       	ori	r24, 0x80	; 128
     962:	98 2e       	mov	r9, r24
     964:	0a c0       	rjmp	.+20     	; 0x97a <__stack+0x7b>
     966:	e2 e0       	ldi	r30, 0x02	; 2
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ec 0f       	add	r30, r28
     96c:	fd 1f       	adc	r31, r29
     96e:	e1 0f       	add	r30, r17
     970:	f1 1d       	adc	r31, r1
     972:	80 81       	ld	r24, Z
     974:	80 33       	cpi	r24, 0x30	; 48
     976:	19 f4       	brne	.+6      	; 0x97e <__stack+0x7f>
     978:	11 50       	subi	r17, 0x01	; 1
     97a:	11 11       	cpse	r17, r1
     97c:	f4 cf       	rjmp	.-24     	; 0x966 <__stack+0x67>
     97e:	97 fe       	sbrs	r9, 7
     980:	0e c0       	rjmp	.+28     	; 0x99e <__stack+0x9f>
     982:	44 24       	eor	r4, r4
     984:	43 94       	inc	r4
     986:	41 0e       	add	r4, r17
     988:	81 2f       	mov	r24, r17
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	c8 16       	cp	r12, r24
     98e:	d9 06       	cpc	r13, r25
     990:	2c f4       	brge	.+10     	; 0x99c <__stack+0x9d>
     992:	1c 19       	sub	r17, r12
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x9f>
     996:	44 24       	eor	r4, r4
     998:	43 94       	inc	r4
     99a:	01 c0       	rjmp	.+2      	; 0x99e <__stack+0x9f>
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	97 fe       	sbrs	r9, 7
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <__stack+0xaf>
     9a2:	1c 14       	cp	r1, r12
     9a4:	1d 04       	cpc	r1, r13
     9a6:	34 f4       	brge	.+12     	; 0x9b4 <__stack+0xb5>
     9a8:	c6 01       	movw	r24, r12
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <__stack+0xb9>
     9ae:	85 e0       	ldi	r24, 0x05	; 5
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	01 11       	cpse	r16, r1
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	11 23       	and	r17, r17
     9be:	31 f0       	breq	.+12     	; 0x9cc <__stack+0xcd>
     9c0:	21 2f       	mov	r18, r17
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	2f 5f       	subi	r18, 0xFF	; 255
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	25 2d       	mov	r18, r5
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	82 17       	cp	r24, r18
     9d2:	93 07       	cpc	r25, r19
     9d4:	14 f4       	brge	.+4      	; 0x9da <__stack+0xdb>
     9d6:	58 1a       	sub	r5, r24
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0xdd>
     9da:	51 2c       	mov	r5, r1
     9dc:	89 2d       	mov	r24, r9
     9de:	89 70       	andi	r24, 0x09	; 9
     9e0:	49 f4       	brne	.+18     	; 0x9f4 <__stack+0xf5>
     9e2:	55 20       	and	r5, r5
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__stack+0xf5>
     9e6:	b7 01       	movw	r22, r14
     9e8:	80 e2       	ldi	r24, 0x20	; 32
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     9f0:	5a 94       	dec	r5
     9f2:	f7 cf       	rjmp	.-18     	; 0x9e2 <__stack+0xe3>
     9f4:	00 23       	and	r16, r16
     9f6:	29 f0       	breq	.+10     	; 0xa02 <__stack+0x103>
     9f8:	b7 01       	movw	r22, r14
     9fa:	80 2f       	mov	r24, r16
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     a02:	93 fc       	sbrc	r9, 3
     a04:	09 c0       	rjmp	.+18     	; 0xa18 <__stack+0x119>
     a06:	55 20       	and	r5, r5
     a08:	39 f0       	breq	.+14     	; 0xa18 <__stack+0x119>
     a0a:	b7 01       	movw	r22, r14
     a0c:	80 e3       	ldi	r24, 0x30	; 48
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     a14:	5a 94       	dec	r5
     a16:	f7 cf       	rjmp	.-18     	; 0xa06 <__stack+0x107>
     a18:	97 fe       	sbrs	r9, 7
     a1a:	4c c0       	rjmp	.+152    	; 0xab4 <__stack+0x1b5>
     a1c:	46 01       	movw	r8, r12
     a1e:	d7 fe       	sbrs	r13, 7
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <__stack+0x127>
     a22:	81 2c       	mov	r8, r1
     a24:	91 2c       	mov	r9, r1
     a26:	c6 01       	movw	r24, r12
     a28:	88 19       	sub	r24, r8
     a2a:	99 09       	sbc	r25, r9
     a2c:	f3 01       	movw	r30, r6
     a2e:	e8 0f       	add	r30, r24
     a30:	f9 1f       	adc	r31, r25
     a32:	fe 87       	std	Y+14, r31	; 0x0e
     a34:	ed 87       	std	Y+13, r30	; 0x0d
     a36:	96 01       	movw	r18, r12
     a38:	24 19       	sub	r18, r4
     a3a:	31 09       	sbc	r19, r1
     a3c:	38 8b       	std	Y+16, r19	; 0x10
     a3e:	2f 87       	std	Y+15, r18	; 0x0f
     a40:	01 2f       	mov	r16, r17
     a42:	10 e0       	ldi	r17, 0x00	; 0
     a44:	11 95       	neg	r17
     a46:	01 95       	neg	r16
     a48:	11 09       	sbc	r17, r1
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	83 16       	cp	r8, r19
     a4e:	93 06       	cpc	r9, r19
     a50:	29 f4       	brne	.+10     	; 0xa5c <__stack+0x15d>
     a52:	b7 01       	movw	r22, r14
     a54:	8e e2       	ldi	r24, 0x2E	; 46
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     a5c:	c8 14       	cp	r12, r8
     a5e:	d9 04       	cpc	r13, r9
     a60:	4c f0       	brlt	.+18     	; 0xa74 <__stack+0x175>
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	88 15       	cp	r24, r8
     a68:	99 05       	cpc	r25, r9
     a6a:	24 f4       	brge	.+8      	; 0xa74 <__stack+0x175>
     a6c:	ed 85       	ldd	r30, Y+13	; 0x0d
     a6e:	fe 85       	ldd	r31, Y+14	; 0x0e
     a70:	81 81       	ldd	r24, Z+1	; 0x01
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__stack+0x177>
     a74:	80 e3       	ldi	r24, 0x30	; 48
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	8f 1a       	sub	r8, r31
     a7a:	91 08       	sbc	r9, r1
     a7c:	2d 85       	ldd	r18, Y+13	; 0x0d
     a7e:	3e 85       	ldd	r19, Y+14	; 0x0e
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	3e 87       	std	Y+14, r19	; 0x0e
     a86:	2d 87       	std	Y+13, r18	; 0x0d
     a88:	80 16       	cp	r8, r16
     a8a:	91 06       	cpc	r9, r17
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__stack+0x199>
     a8e:	b7 01       	movw	r22, r14
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     a96:	d9 cf       	rjmp	.-78     	; 0xa4a <__stack+0x14b>
     a98:	c8 14       	cp	r12, r8
     a9a:	d9 04       	cpc	r13, r9
     a9c:	41 f4       	brne	.+16     	; 0xaae <__stack+0x1af>
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	96 33       	cpi	r25, 0x36	; 54
     aa2:	20 f4       	brcc	.+8      	; 0xaac <__stack+0x1ad>
     aa4:	95 33       	cpi	r25, 0x35	; 53
     aa6:	19 f4       	brne	.+6      	; 0xaae <__stack+0x1af>
     aa8:	3c 85       	ldd	r19, Y+12	; 0x0c
     aaa:	34 ff       	sbrs	r19, 4
     aac:	81 e3       	ldi	r24, 0x31	; 49
     aae:	b7 01       	movw	r22, r14
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	4e c0       	rjmp	.+156    	; 0xb50 <__stack+0x251>
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	81 33       	cpi	r24, 0x31	; 49
     ab8:	19 f0       	breq	.+6      	; 0xac0 <__stack+0x1c1>
     aba:	9c 85       	ldd	r25, Y+12	; 0x0c
     abc:	9f 7e       	andi	r25, 0xEF	; 239
     abe:	9c 87       	std	Y+12, r25	; 0x0c
     ac0:	b7 01       	movw	r22, r14
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     ac8:	11 11       	cpse	r17, r1
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <__stack+0x1d7>
     acc:	94 fc       	sbrc	r9, 4
     ace:	18 c0       	rjmp	.+48     	; 0xb00 <__stack+0x201>
     ad0:	85 e6       	ldi	r24, 0x65	; 101
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__stack+0x205>
     ad6:	b7 01       	movw	r22, r14
     ad8:	8e e2       	ldi	r24, 0x2E	; 46
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     ae0:	1e 5f       	subi	r17, 0xFE	; 254
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	01 e0       	ldi	r16, 0x01	; 1
     ae6:	08 0f       	add	r16, r24
     ae8:	f3 01       	movw	r30, r6
     aea:	e8 0f       	add	r30, r24
     aec:	f1 1d       	adc	r31, r1
     aee:	80 81       	ld	r24, Z
     af0:	b7 01       	movw	r22, r14
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     af8:	80 2f       	mov	r24, r16
     afa:	01 13       	cpse	r16, r17
     afc:	f3 cf       	rjmp	.-26     	; 0xae4 <__stack+0x1e5>
     afe:	e6 cf       	rjmp	.-52     	; 0xacc <__stack+0x1cd>
     b00:	85 e4       	ldi	r24, 0x45	; 69
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	b7 01       	movw	r22, r14
     b06:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     b0a:	d7 fc       	sbrc	r13, 7
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <__stack+0x21b>
     b0e:	c1 14       	cp	r12, r1
     b10:	d1 04       	cpc	r13, r1
     b12:	41 f4       	brne	.+16     	; 0xb24 <__stack+0x225>
     b14:	ec 85       	ldd	r30, Y+12	; 0x0c
     b16:	e4 ff       	sbrs	r30, 4
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <__stack+0x225>
     b1a:	d1 94       	neg	r13
     b1c:	c1 94       	neg	r12
     b1e:	d1 08       	sbc	r13, r1
     b20:	8d e2       	ldi	r24, 0x2D	; 45
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <__stack+0x227>
     b24:	8b e2       	ldi	r24, 0x2B	; 43
     b26:	b7 01       	movw	r22, r14
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     b2e:	80 e3       	ldi	r24, 0x30	; 48
     b30:	2a e0       	ldi	r18, 0x0A	; 10
     b32:	c2 16       	cp	r12, r18
     b34:	d1 04       	cpc	r13, r1
     b36:	2c f0       	brlt	.+10     	; 0xb42 <__stack+0x243>
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	fa e0       	ldi	r31, 0x0A	; 10
     b3c:	cf 1a       	sub	r12, r31
     b3e:	d1 08       	sbc	r13, r1
     b40:	f7 cf       	rjmp	.-18     	; 0xb30 <__stack+0x231>
     b42:	b7 01       	movw	r22, r14
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     b4a:	b7 01       	movw	r22, r14
     b4c:	c6 01       	movw	r24, r12
     b4e:	c0 96       	adiw	r24, 0x30	; 48
     b50:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     b54:	54 c1       	rjmp	.+680    	; 0xdfe <__stack+0x4ff>
     b56:	83 36       	cpi	r24, 0x63	; 99
     b58:	31 f0       	breq	.+12     	; 0xb66 <__stack+0x267>
     b5a:	83 37       	cpi	r24, 0x73	; 115
     b5c:	79 f0       	breq	.+30     	; 0xb7c <__stack+0x27d>
     b5e:	83 35       	cpi	r24, 0x53	; 83
     b60:	09 f0       	breq	.+2      	; 0xb64 <__stack+0x265>
     b62:	56 c0       	rjmp	.+172    	; 0xc10 <__stack+0x311>
     b64:	20 c0       	rjmp	.+64     	; 0xba6 <__stack+0x2a7>
     b66:	56 01       	movw	r10, r12
     b68:	32 e0       	ldi	r19, 0x02	; 2
     b6a:	a3 0e       	add	r10, r19
     b6c:	b1 1c       	adc	r11, r1
     b6e:	f6 01       	movw	r30, r12
     b70:	80 81       	ld	r24, Z
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	01 e0       	ldi	r16, 0x01	; 1
     b76:	10 e0       	ldi	r17, 0x00	; 0
     b78:	63 01       	movw	r12, r6
     b7a:	12 c0       	rjmp	.+36     	; 0xba0 <__stack+0x2a1>
     b7c:	56 01       	movw	r10, r12
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
     b80:	af 0e       	add	r10, r31
     b82:	b1 1c       	adc	r11, r1
     b84:	f6 01       	movw	r30, r12
     b86:	c0 80       	ld	r12, Z
     b88:	d1 80       	ldd	r13, Z+1	; 0x01
     b8a:	96 fe       	sbrs	r9, 6
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <__stack+0x295>
     b8e:	61 2f       	mov	r22, r17
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <__stack+0x299>
     b94:	6f ef       	ldi	r22, 0xFF	; 255
     b96:	7f ef       	ldi	r23, 0xFF	; 255
     b98:	c6 01       	movw	r24, r12
     b9a:	0e 94 a1 08 	call	0x1142	; 0x1142 <strnlen>
     b9e:	8c 01       	movw	r16, r24
     ba0:	f9 2d       	mov	r31, r9
     ba2:	ff 77       	andi	r31, 0x7F	; 127
     ba4:	14 c0       	rjmp	.+40     	; 0xbce <__stack+0x2cf>
     ba6:	56 01       	movw	r10, r12
     ba8:	22 e0       	ldi	r18, 0x02	; 2
     baa:	a2 0e       	add	r10, r18
     bac:	b1 1c       	adc	r11, r1
     bae:	f6 01       	movw	r30, r12
     bb0:	c0 80       	ld	r12, Z
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	96 fe       	sbrs	r9, 6
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__stack+0x2bf>
     bb8:	61 2f       	mov	r22, r17
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <__stack+0x2c3>
     bbe:	6f ef       	ldi	r22, 0xFF	; 255
     bc0:	7f ef       	ldi	r23, 0xFF	; 255
     bc2:	c6 01       	movw	r24, r12
     bc4:	0e 94 88 08 	call	0x1110	; 0x1110 <strnlen_P>
     bc8:	8c 01       	movw	r16, r24
     bca:	f9 2d       	mov	r31, r9
     bcc:	f0 68       	ori	r31, 0x80	; 128
     bce:	9f 2e       	mov	r9, r31
     bd0:	f3 fd       	sbrc	r31, 3
     bd2:	1a c0       	rjmp	.+52     	; 0xc08 <__stack+0x309>
     bd4:	85 2d       	mov	r24, r5
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 17       	cp	r16, r24
     bda:	19 07       	cpc	r17, r25
     bdc:	a8 f4       	brcc	.+42     	; 0xc08 <__stack+0x309>
     bde:	b7 01       	movw	r22, r14
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     be8:	5a 94       	dec	r5
     bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <__stack+0x2d5>
     bec:	f6 01       	movw	r30, r12
     bee:	97 fc       	sbrc	r9, 7
     bf0:	85 91       	lpm	r24, Z+
     bf2:	97 fe       	sbrs	r9, 7
     bf4:	81 91       	ld	r24, Z+
     bf6:	6f 01       	movw	r12, r30
     bf8:	b7 01       	movw	r22, r14
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     c00:	51 10       	cpse	r5, r1
     c02:	5a 94       	dec	r5
     c04:	01 50       	subi	r16, 0x01	; 1
     c06:	11 09       	sbc	r17, r1
     c08:	01 15       	cp	r16, r1
     c0a:	11 05       	cpc	r17, r1
     c0c:	79 f7       	brne	.-34     	; 0xbec <__stack+0x2ed>
     c0e:	f7 c0       	rjmp	.+494    	; 0xdfe <__stack+0x4ff>
     c10:	84 36       	cpi	r24, 0x64	; 100
     c12:	11 f0       	breq	.+4      	; 0xc18 <__stack+0x319>
     c14:	89 36       	cpi	r24, 0x69	; 105
     c16:	61 f5       	brne	.+88     	; 0xc70 <__stack+0x371>
     c18:	56 01       	movw	r10, r12
     c1a:	97 fe       	sbrs	r9, 7
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__stack+0x331>
     c1e:	24 e0       	ldi	r18, 0x04	; 4
     c20:	a2 0e       	add	r10, r18
     c22:	b1 1c       	adc	r11, r1
     c24:	f6 01       	movw	r30, r12
     c26:	60 81       	ld	r22, Z
     c28:	71 81       	ldd	r23, Z+1	; 0x01
     c2a:	82 81       	ldd	r24, Z+2	; 0x02
     c2c:	93 81       	ldd	r25, Z+3	; 0x03
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <__stack+0x345>
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	af 0e       	add	r10, r31
     c34:	b1 1c       	adc	r11, r1
     c36:	f6 01       	movw	r30, r12
     c38:	60 81       	ld	r22, Z
     c3a:	71 81       	ldd	r23, Z+1	; 0x01
     c3c:	07 2e       	mov	r0, r23
     c3e:	00 0c       	add	r0, r0
     c40:	88 0b       	sbc	r24, r24
     c42:	99 0b       	sbc	r25, r25
     c44:	f9 2d       	mov	r31, r9
     c46:	ff 76       	andi	r31, 0x6F	; 111
     c48:	9f 2e       	mov	r9, r31
     c4a:	97 ff       	sbrs	r25, 7
     c4c:	09 c0       	rjmp	.+18     	; 0xc60 <__stack+0x361>
     c4e:	90 95       	com	r25
     c50:	80 95       	com	r24
     c52:	70 95       	com	r23
     c54:	61 95       	neg	r22
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	f0 68       	ori	r31, 0x80	; 128
     c5e:	9f 2e       	mov	r9, r31
     c60:	2a e0       	ldi	r18, 0x0A	; 10
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a3 01       	movw	r20, r6
     c66:	0e 94 0a 09 	call	0x1214	; 0x1214 <__ultoa_invert>
     c6a:	c8 2e       	mov	r12, r24
     c6c:	c6 18       	sub	r12, r6
     c6e:	3f c0       	rjmp	.+126    	; 0xcee <__stack+0x3ef>
     c70:	09 2d       	mov	r16, r9
     c72:	85 37       	cpi	r24, 0x75	; 117
     c74:	21 f4       	brne	.+8      	; 0xc7e <__stack+0x37f>
     c76:	0f 7e       	andi	r16, 0xEF	; 239
     c78:	2a e0       	ldi	r18, 0x0A	; 10
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	1d c0       	rjmp	.+58     	; 0xcb8 <__stack+0x3b9>
     c7e:	09 7f       	andi	r16, 0xF9	; 249
     c80:	8f 36       	cpi	r24, 0x6F	; 111
     c82:	91 f0       	breq	.+36     	; 0xca8 <__stack+0x3a9>
     c84:	18 f4       	brcc	.+6      	; 0xc8c <__stack+0x38d>
     c86:	88 35       	cpi	r24, 0x58	; 88
     c88:	59 f0       	breq	.+22     	; 0xca0 <__stack+0x3a1>
     c8a:	c3 c0       	rjmp	.+390    	; 0xe12 <__stack+0x513>
     c8c:	80 37       	cpi	r24, 0x70	; 112
     c8e:	19 f0       	breq	.+6      	; 0xc96 <__stack+0x397>
     c90:	88 37       	cpi	r24, 0x78	; 120
     c92:	11 f0       	breq	.+4      	; 0xc98 <__stack+0x399>
     c94:	be c0       	rjmp	.+380    	; 0xe12 <__stack+0x513>
     c96:	00 61       	ori	r16, 0x10	; 16
     c98:	04 ff       	sbrs	r16, 4
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <__stack+0x3af>
     c9c:	04 60       	ori	r16, 0x04	; 4
     c9e:	07 c0       	rjmp	.+14     	; 0xcae <__stack+0x3af>
     ca0:	94 fe       	sbrs	r9, 4
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <__stack+0x3b5>
     ca4:	06 60       	ori	r16, 0x06	; 6
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <__stack+0x3b5>
     ca8:	28 e0       	ldi	r18, 0x08	; 8
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <__stack+0x3b9>
     cae:	20 e1       	ldi	r18, 0x10	; 16
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <__stack+0x3b9>
     cb4:	20 e1       	ldi	r18, 0x10	; 16
     cb6:	32 e0       	ldi	r19, 0x02	; 2
     cb8:	56 01       	movw	r10, r12
     cba:	07 ff       	sbrs	r16, 7
     cbc:	09 c0       	rjmp	.+18     	; 0xcd0 <__stack+0x3d1>
     cbe:	84 e0       	ldi	r24, 0x04	; 4
     cc0:	a8 0e       	add	r10, r24
     cc2:	b1 1c       	adc	r11, r1
     cc4:	f6 01       	movw	r30, r12
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	08 c0       	rjmp	.+16     	; 0xce0 <__stack+0x3e1>
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
     cd2:	af 0e       	add	r10, r31
     cd4:	b1 1c       	adc	r11, r1
     cd6:	f6 01       	movw	r30, r12
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a3 01       	movw	r20, r6
     ce2:	0e 94 0a 09 	call	0x1214	; 0x1214 <__ultoa_invert>
     ce6:	c8 2e       	mov	r12, r24
     ce8:	c6 18       	sub	r12, r6
     cea:	0f 77       	andi	r16, 0x7F	; 127
     cec:	90 2e       	mov	r9, r16
     cee:	96 fe       	sbrs	r9, 6
     cf0:	0b c0       	rjmp	.+22     	; 0xd08 <__stack+0x409>
     cf2:	09 2d       	mov	r16, r9
     cf4:	0e 7f       	andi	r16, 0xFE	; 254
     cf6:	c1 16       	cp	r12, r17
     cf8:	50 f4       	brcc	.+20     	; 0xd0e <__stack+0x40f>
     cfa:	94 fe       	sbrs	r9, 4
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <__stack+0x413>
     cfe:	92 fc       	sbrc	r9, 2
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <__stack+0x413>
     d02:	09 2d       	mov	r16, r9
     d04:	0e 7e       	andi	r16, 0xEE	; 238
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <__stack+0x413>
     d08:	dc 2c       	mov	r13, r12
     d0a:	09 2d       	mov	r16, r9
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__stack+0x415>
     d0e:	dc 2c       	mov	r13, r12
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <__stack+0x415>
     d12:	d1 2e       	mov	r13, r17
     d14:	04 ff       	sbrs	r16, 4
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <__stack+0x433>
     d18:	fe 01       	movw	r30, r28
     d1a:	ec 0d       	add	r30, r12
     d1c:	f1 1d       	adc	r31, r1
     d1e:	80 81       	ld	r24, Z
     d20:	80 33       	cpi	r24, 0x30	; 48
     d22:	11 f4       	brne	.+4      	; 0xd28 <__stack+0x429>
     d24:	09 7e       	andi	r16, 0xE9	; 233
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <__stack+0x43b>
     d28:	02 ff       	sbrs	r16, 2
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <__stack+0x439>
     d2c:	d3 94       	inc	r13
     d2e:	d3 94       	inc	r13
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <__stack+0x43b>
     d32:	80 2f       	mov	r24, r16
     d34:	86 78       	andi	r24, 0x86	; 134
     d36:	09 f0       	breq	.+2      	; 0xd3a <__stack+0x43b>
     d38:	d3 94       	inc	r13
     d3a:	03 fd       	sbrc	r16, 3
     d3c:	11 c0       	rjmp	.+34     	; 0xd60 <__stack+0x461>
     d3e:	00 ff       	sbrs	r16, 0
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <__stack+0x44f>
     d42:	1c 2d       	mov	r17, r12
     d44:	d5 14       	cp	r13, r5
     d46:	80 f4       	brcc	.+32     	; 0xd68 <__stack+0x469>
     d48:	15 0d       	add	r17, r5
     d4a:	1d 19       	sub	r17, r13
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__stack+0x469>
     d4e:	d5 14       	cp	r13, r5
     d50:	58 f4       	brcc	.+22     	; 0xd68 <__stack+0x469>
     d52:	b7 01       	movw	r22, r14
     d54:	80 e2       	ldi	r24, 0x20	; 32
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     d5c:	d3 94       	inc	r13
     d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <__stack+0x44f>
     d60:	d5 14       	cp	r13, r5
     d62:	10 f4       	brcc	.+4      	; 0xd68 <__stack+0x469>
     d64:	5d 18       	sub	r5, r13
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <__stack+0x46b>
     d68:	51 2c       	mov	r5, r1
     d6a:	04 ff       	sbrs	r16, 4
     d6c:	10 c0       	rjmp	.+32     	; 0xd8e <__stack+0x48f>
     d6e:	b7 01       	movw	r22, r14
     d70:	80 e3       	ldi	r24, 0x30	; 48
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     d78:	02 ff       	sbrs	r16, 2
     d7a:	17 c0       	rjmp	.+46     	; 0xdaa <__stack+0x4ab>
     d7c:	01 fd       	sbrc	r16, 1
     d7e:	03 c0       	rjmp	.+6      	; 0xd86 <__stack+0x487>
     d80:	88 e7       	ldi	r24, 0x78	; 120
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <__stack+0x48b>
     d86:	88 e5       	ldi	r24, 0x58	; 88
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	b7 01       	movw	r22, r14
     d8c:	0c c0       	rjmp	.+24     	; 0xda6 <__stack+0x4a7>
     d8e:	80 2f       	mov	r24, r16
     d90:	86 78       	andi	r24, 0x86	; 134
     d92:	59 f0       	breq	.+22     	; 0xdaa <__stack+0x4ab>
     d94:	01 ff       	sbrs	r16, 1
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <__stack+0x49d>
     d98:	8b e2       	ldi	r24, 0x2B	; 43
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <__stack+0x49f>
     d9c:	80 e2       	ldi	r24, 0x20	; 32
     d9e:	07 fd       	sbrc	r16, 7
     da0:	8d e2       	ldi	r24, 0x2D	; 45
     da2:	b7 01       	movw	r22, r14
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     daa:	c1 16       	cp	r12, r17
     dac:	38 f4       	brcc	.+14     	; 0xdbc <__stack+0x4bd>
     dae:	b7 01       	movw	r22, r14
     db0:	80 e3       	ldi	r24, 0x30	; 48
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     db8:	11 50       	subi	r17, 0x01	; 1
     dba:	f7 cf       	rjmp	.-18     	; 0xdaa <__stack+0x4ab>
     dbc:	ca 94       	dec	r12
     dbe:	f3 01       	movw	r30, r6
     dc0:	ec 0d       	add	r30, r12
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 81       	ld	r24, Z
     dc6:	b7 01       	movw	r22, r14
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     dce:	c1 10       	cpse	r12, r1
     dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <__stack+0x4bd>
     dd2:	15 c0       	rjmp	.+42     	; 0xdfe <__stack+0x4ff>
     dd4:	f4 e0       	ldi	r31, 0x04	; 4
     dd6:	f5 15       	cp	r31, r5
     dd8:	60 f5       	brcc	.+88     	; 0xe32 <__stack+0x533>
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	58 1a       	sub	r5, r24
     dde:	93 fe       	sbrs	r9, 3
     de0:	1f c0       	rjmp	.+62     	; 0xe20 <__stack+0x521>
     de2:	01 11       	cpse	r16, r1
     de4:	27 c0       	rjmp	.+78     	; 0xe34 <__stack+0x535>
     de6:	2c 85       	ldd	r18, Y+12	; 0x0c
     de8:	23 ff       	sbrs	r18, 3
     dea:	2a c0       	rjmp	.+84     	; 0xe40 <__stack+0x541>
     dec:	08 e7       	ldi	r16, 0x78	; 120
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	39 2d       	mov	r19, r9
     df2:	30 71       	andi	r19, 0x10	; 16
     df4:	93 2e       	mov	r9, r19
     df6:	f8 01       	movw	r30, r16
     df8:	84 91       	lpm	r24, Z
     dfa:	81 11       	cpse	r24, r1
     dfc:	24 c0       	rjmp	.+72     	; 0xe46 <__stack+0x547>
     dfe:	55 20       	and	r5, r5
     e00:	09 f4       	brne	.+2      	; 0xe04 <__stack+0x505>
     e02:	e4 cc       	rjmp	.-1592   	; 0x7cc <vfprintf+0x58>
     e04:	b7 01       	movw	r22, r14
     e06:	80 e2       	ldi	r24, 0x20	; 32
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     e0e:	5a 94       	dec	r5
     e10:	f6 cf       	rjmp	.-20     	; 0xdfe <__stack+0x4ff>
     e12:	f7 01       	movw	r30, r14
     e14:	86 81       	ldd	r24, Z+6	; 0x06
     e16:	97 81       	ldd	r25, Z+7	; 0x07
     e18:	26 c0       	rjmp	.+76     	; 0xe66 <__stack+0x567>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	23 c0       	rjmp	.+70     	; 0xe66 <__stack+0x567>
     e20:	b7 01       	movw	r22, r14
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     e2a:	5a 94       	dec	r5
     e2c:	51 10       	cpse	r5, r1
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <__stack+0x521>
     e30:	d8 cf       	rjmp	.-80     	; 0xde2 <__stack+0x4e3>
     e32:	51 2c       	mov	r5, r1
     e34:	b7 01       	movw	r22, r14
     e36:	80 2f       	mov	r24, r16
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     e3e:	d3 cf       	rjmp	.-90     	; 0xde6 <__stack+0x4e7>
     e40:	0c e7       	ldi	r16, 0x7C	; 124
     e42:	10 e0       	ldi	r17, 0x00	; 0
     e44:	d5 cf       	rjmp	.-86     	; 0xdf0 <__stack+0x4f1>
     e46:	91 10       	cpse	r9, r1
     e48:	80 52       	subi	r24, 0x20	; 32
     e4a:	b7 01       	movw	r22, r14
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 ac 08 	call	0x1158	; 0x1158 <fputc>
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	cf cf       	rjmp	.-98     	; 0xdf6 <__stack+0x4f7>
     e58:	23 e0       	ldi	r18, 0x03	; 3
     e5a:	25 15       	cp	r18, r5
     e5c:	10 f4       	brcc	.+4      	; 0xe62 <__stack+0x563>
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	bd cf       	rjmp	.-134    	; 0xddc <__stack+0x4dd>
     e62:	51 2c       	mov	r5, r1
     e64:	c0 cf       	rjmp	.-128    	; 0xde6 <__stack+0x4e7>
     e66:	60 96       	adiw	r28, 0x10	; 16
     e68:	e2 e1       	ldi	r30, 0x12	; 18
     e6a:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__epilogue_restores__>

00000e6e <__udivmodsi4>:
     e6e:	a1 e2       	ldi	r26, 0x21	; 33
     e70:	1a 2e       	mov	r1, r26
     e72:	aa 1b       	sub	r26, r26
     e74:	bb 1b       	sub	r27, r27
     e76:	fd 01       	movw	r30, r26
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <__udivmodsi4_ep>

00000e7a <__udivmodsi4_loop>:
     e7a:	aa 1f       	adc	r26, r26
     e7c:	bb 1f       	adc	r27, r27
     e7e:	ee 1f       	adc	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	a2 17       	cp	r26, r18
     e84:	b3 07       	cpc	r27, r19
     e86:	e4 07       	cpc	r30, r20
     e88:	f5 07       	cpc	r31, r21
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__udivmodsi4_ep>
     e8c:	a2 1b       	sub	r26, r18
     e8e:	b3 0b       	sbc	r27, r19
     e90:	e4 0b       	sbc	r30, r20
     e92:	f5 0b       	sbc	r31, r21

00000e94 <__udivmodsi4_ep>:
     e94:	66 1f       	adc	r22, r22
     e96:	77 1f       	adc	r23, r23
     e98:	88 1f       	adc	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	1a 94       	dec	r1
     e9e:	69 f7       	brne	.-38     	; 0xe7a <__udivmodsi4_loop>
     ea0:	60 95       	com	r22
     ea2:	70 95       	com	r23
     ea4:	80 95       	com	r24
     ea6:	90 95       	com	r25
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	bd 01       	movw	r22, r26
     eae:	cf 01       	movw	r24, r30
     eb0:	08 95       	ret

00000eb2 <__tablejump2__>:
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	05 90       	lpm	r0, Z+
     eb8:	f4 91       	lpm	r31, Z
     eba:	e0 2d       	mov	r30, r0
     ebc:	09 94       	ijmp

00000ebe <__muluhisi3>:
     ebe:	0e 94 a1 07 	call	0xf42	; 0xf42 <__umulhisi3>
     ec2:	a5 9f       	mul	r26, r21
     ec4:	90 0d       	add	r25, r0
     ec6:	b4 9f       	mul	r27, r20
     ec8:	90 0d       	add	r25, r0
     eca:	a4 9f       	mul	r26, r20
     ecc:	80 0d       	add	r24, r0
     ece:	91 1d       	adc	r25, r1
     ed0:	11 24       	eor	r1, r1
     ed2:	08 95       	ret

00000ed4 <__prologue_saves__>:
     ed4:	2f 92       	push	r2
     ed6:	3f 92       	push	r3
     ed8:	4f 92       	push	r4
     eda:	5f 92       	push	r5
     edc:	6f 92       	push	r6
     ede:	7f 92       	push	r7
     ee0:	8f 92       	push	r8
     ee2:	9f 92       	push	r9
     ee4:	af 92       	push	r10
     ee6:	bf 92       	push	r11
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	ca 1b       	sub	r28, r26
     efe:	db 0b       	sbc	r29, r27
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	09 94       	ijmp

00000f0c <__epilogue_restores__>:
     f0c:	2a 88       	ldd	r2, Y+18	; 0x12
     f0e:	39 88       	ldd	r3, Y+17	; 0x11
     f10:	48 88       	ldd	r4, Y+16	; 0x10
     f12:	5f 84       	ldd	r5, Y+15	; 0x0f
     f14:	6e 84       	ldd	r6, Y+14	; 0x0e
     f16:	7d 84       	ldd	r7, Y+13	; 0x0d
     f18:	8c 84       	ldd	r8, Y+12	; 0x0c
     f1a:	9b 84       	ldd	r9, Y+11	; 0x0b
     f1c:	aa 84       	ldd	r10, Y+10	; 0x0a
     f1e:	b9 84       	ldd	r11, Y+9	; 0x09
     f20:	c8 84       	ldd	r12, Y+8	; 0x08
     f22:	df 80       	ldd	r13, Y+7	; 0x07
     f24:	ee 80       	ldd	r14, Y+6	; 0x06
     f26:	fd 80       	ldd	r15, Y+5	; 0x05
     f28:	0c 81       	ldd	r16, Y+4	; 0x04
     f2a:	1b 81       	ldd	r17, Y+3	; 0x03
     f2c:	aa 81       	ldd	r26, Y+2	; 0x02
     f2e:	b9 81       	ldd	r27, Y+1	; 0x01
     f30:	ce 0f       	add	r28, r30
     f32:	d1 1d       	adc	r29, r1
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	ed 01       	movw	r28, r26
     f40:	08 95       	ret

00000f42 <__umulhisi3>:
     f42:	a2 9f       	mul	r26, r18
     f44:	b0 01       	movw	r22, r0
     f46:	b3 9f       	mul	r27, r19
     f48:	c0 01       	movw	r24, r0
     f4a:	a3 9f       	mul	r26, r19
     f4c:	70 0d       	add	r23, r0
     f4e:	81 1d       	adc	r24, r1
     f50:	11 24       	eor	r1, r1
     f52:	91 1d       	adc	r25, r1
     f54:	b2 9f       	mul	r27, r18
     f56:	70 0d       	add	r23, r0
     f58:	81 1d       	adc	r24, r1
     f5a:	11 24       	eor	r1, r1
     f5c:	91 1d       	adc	r25, r1
     f5e:	08 95       	ret

00000f60 <__ftoa_engine>:
     f60:	28 30       	cpi	r18, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__ftoa_engine+0x6>
     f64:	27 e0       	ldi	r18, 0x07	; 7
     f66:	33 27       	eor	r19, r19
     f68:	da 01       	movw	r26, r20
     f6a:	99 0f       	add	r25, r25
     f6c:	31 1d       	adc	r19, r1
     f6e:	87 fd       	sbrc	r24, 7
     f70:	91 60       	ori	r25, 0x01	; 1
     f72:	00 96       	adiw	r24, 0x00	; 0
     f74:	61 05       	cpc	r22, r1
     f76:	71 05       	cpc	r23, r1
     f78:	39 f4       	brne	.+14     	; 0xf88 <__ftoa_engine+0x28>
     f7a:	32 60       	ori	r19, 0x02	; 2
     f7c:	2e 5f       	subi	r18, 0xFE	; 254
     f7e:	3d 93       	st	X+, r19
     f80:	30 e3       	ldi	r19, 0x30	; 48
     f82:	2a 95       	dec	r18
     f84:	e1 f7       	brne	.-8      	; 0xf7e <__ftoa_engine+0x1e>
     f86:	08 95       	ret
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	30 f0       	brcs	.+12     	; 0xf98 <__ftoa_engine+0x38>
     f8c:	80 38       	cpi	r24, 0x80	; 128
     f8e:	71 05       	cpc	r23, r1
     f90:	61 05       	cpc	r22, r1
     f92:	09 f0       	breq	.+2      	; 0xf96 <__ftoa_engine+0x36>
     f94:	3c 5f       	subi	r19, 0xFC	; 252
     f96:	3c 5f       	subi	r19, 0xFC	; 252
     f98:	3d 93       	st	X+, r19
     f9a:	91 30       	cpi	r25, 0x01	; 1
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <__ftoa_engine+0x40>
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	91 1d       	adc	r25, r1
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	1f 93       	push	r17
     fa8:	0f 93       	push	r16
     faa:	ff 92       	push	r15
     fac:	ef 92       	push	r14
     fae:	19 2f       	mov	r17, r25
     fb0:	98 7f       	andi	r25, 0xF8	; 248
     fb2:	96 95       	lsr	r25
     fb4:	e9 2f       	mov	r30, r25
     fb6:	96 95       	lsr	r25
     fb8:	96 95       	lsr	r25
     fba:	e9 0f       	add	r30, r25
     fbc:	ff 27       	eor	r31, r31
     fbe:	e6 52       	subi	r30, 0x26	; 38
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	99 27       	eor	r25, r25
     fc4:	33 27       	eor	r19, r19
     fc6:	ee 24       	eor	r14, r14
     fc8:	ff 24       	eor	r15, r15
     fca:	a7 01       	movw	r20, r14
     fcc:	e7 01       	movw	r28, r14
     fce:	05 90       	lpm	r0, Z+
     fd0:	08 94       	sec
     fd2:	07 94       	ror	r0
     fd4:	28 f4       	brcc	.+10     	; 0xfe0 <__ftoa_engine+0x80>
     fd6:	36 0f       	add	r19, r22
     fd8:	e7 1e       	adc	r14, r23
     fda:	f8 1e       	adc	r15, r24
     fdc:	49 1f       	adc	r20, r25
     fde:	51 1d       	adc	r21, r1
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	06 94       	lsr	r0
     fea:	a1 f7       	brne	.-24     	; 0xfd4 <__ftoa_engine+0x74>
     fec:	05 90       	lpm	r0, Z+
     fee:	07 94       	ror	r0
     ff0:	28 f4       	brcc	.+10     	; 0xffc <__ftoa_engine+0x9c>
     ff2:	e7 0e       	add	r14, r23
     ff4:	f8 1e       	adc	r15, r24
     ff6:	49 1f       	adc	r20, r25
     ff8:	56 1f       	adc	r21, r22
     ffa:	c1 1d       	adc	r28, r1
     ffc:	77 0f       	add	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	66 1f       	adc	r22, r22
    1004:	06 94       	lsr	r0
    1006:	a1 f7       	brne	.-24     	; 0xff0 <__ftoa_engine+0x90>
    1008:	05 90       	lpm	r0, Z+
    100a:	07 94       	ror	r0
    100c:	28 f4       	brcc	.+10     	; 0x1018 <__ftoa_engine+0xb8>
    100e:	f8 0e       	add	r15, r24
    1010:	49 1f       	adc	r20, r25
    1012:	56 1f       	adc	r21, r22
    1014:	c7 1f       	adc	r28, r23
    1016:	d1 1d       	adc	r29, r1
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	66 1f       	adc	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	06 94       	lsr	r0
    1022:	a1 f7       	brne	.-24     	; 0x100c <__ftoa_engine+0xac>
    1024:	05 90       	lpm	r0, Z+
    1026:	07 94       	ror	r0
    1028:	20 f4       	brcc	.+8      	; 0x1032 <__ftoa_engine+0xd2>
    102a:	49 0f       	add	r20, r25
    102c:	56 1f       	adc	r21, r22
    102e:	c7 1f       	adc	r28, r23
    1030:	d8 1f       	adc	r29, r24
    1032:	99 0f       	add	r25, r25
    1034:	66 1f       	adc	r22, r22
    1036:	77 1f       	adc	r23, r23
    1038:	88 1f       	adc	r24, r24
    103a:	06 94       	lsr	r0
    103c:	a9 f7       	brne	.-22     	; 0x1028 <__ftoa_engine+0xc8>
    103e:	84 91       	lpm	r24, Z
    1040:	10 95       	com	r17
    1042:	17 70       	andi	r17, 0x07	; 7
    1044:	41 f0       	breq	.+16     	; 0x1056 <__ftoa_engine+0xf6>
    1046:	d6 95       	lsr	r29
    1048:	c7 95       	ror	r28
    104a:	57 95       	ror	r21
    104c:	47 95       	ror	r20
    104e:	f7 94       	ror	r15
    1050:	e7 94       	ror	r14
    1052:	1a 95       	dec	r17
    1054:	c1 f7       	brne	.-16     	; 0x1046 <__ftoa_engine+0xe6>
    1056:	e0 e8       	ldi	r30, 0x80	; 128
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	68 94       	set
    105c:	15 90       	lpm	r1, Z+
    105e:	15 91       	lpm	r17, Z+
    1060:	35 91       	lpm	r19, Z+
    1062:	65 91       	lpm	r22, Z+
    1064:	95 91       	lpm	r25, Z+
    1066:	05 90       	lpm	r0, Z+
    1068:	7f e2       	ldi	r23, 0x2F	; 47
    106a:	73 95       	inc	r23
    106c:	e1 18       	sub	r14, r1
    106e:	f1 0a       	sbc	r15, r17
    1070:	43 0b       	sbc	r20, r19
    1072:	56 0b       	sbc	r21, r22
    1074:	c9 0b       	sbc	r28, r25
    1076:	d0 09       	sbc	r29, r0
    1078:	c0 f7       	brcc	.-16     	; 0x106a <__ftoa_engine+0x10a>
    107a:	e1 0c       	add	r14, r1
    107c:	f1 1e       	adc	r15, r17
    107e:	43 1f       	adc	r20, r19
    1080:	56 1f       	adc	r21, r22
    1082:	c9 1f       	adc	r28, r25
    1084:	d0 1d       	adc	r29, r0
    1086:	7e f4       	brtc	.+30     	; 0x10a6 <__ftoa_engine+0x146>
    1088:	70 33       	cpi	r23, 0x30	; 48
    108a:	11 f4       	brne	.+4      	; 0x1090 <__ftoa_engine+0x130>
    108c:	8a 95       	dec	r24
    108e:	e6 cf       	rjmp	.-52     	; 0x105c <__ftoa_engine+0xfc>
    1090:	e8 94       	clt
    1092:	01 50       	subi	r16, 0x01	; 1
    1094:	30 f0       	brcs	.+12     	; 0x10a2 <__ftoa_engine+0x142>
    1096:	08 0f       	add	r16, r24
    1098:	0a f4       	brpl	.+2      	; 0x109c <__ftoa_engine+0x13c>
    109a:	00 27       	eor	r16, r16
    109c:	02 17       	cp	r16, r18
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <__ftoa_engine+0x142>
    10a0:	20 2f       	mov	r18, r16
    10a2:	23 95       	inc	r18
    10a4:	02 2f       	mov	r16, r18
    10a6:	7a 33       	cpi	r23, 0x3A	; 58
    10a8:	28 f0       	brcs	.+10     	; 0x10b4 <__ftoa_engine+0x154>
    10aa:	79 e3       	ldi	r23, 0x39	; 57
    10ac:	7d 93       	st	X+, r23
    10ae:	2a 95       	dec	r18
    10b0:	e9 f7       	brne	.-6      	; 0x10ac <__ftoa_engine+0x14c>
    10b2:	10 c0       	rjmp	.+32     	; 0x10d4 <__ftoa_engine+0x174>
    10b4:	7d 93       	st	X+, r23
    10b6:	2a 95       	dec	r18
    10b8:	89 f6       	brne	.-94     	; 0x105c <__ftoa_engine+0xfc>
    10ba:	06 94       	lsr	r0
    10bc:	97 95       	ror	r25
    10be:	67 95       	ror	r22
    10c0:	37 95       	ror	r19
    10c2:	17 95       	ror	r17
    10c4:	17 94       	ror	r1
    10c6:	e1 18       	sub	r14, r1
    10c8:	f1 0a       	sbc	r15, r17
    10ca:	43 0b       	sbc	r20, r19
    10cc:	56 0b       	sbc	r21, r22
    10ce:	c9 0b       	sbc	r28, r25
    10d0:	d0 09       	sbc	r29, r0
    10d2:	98 f0       	brcs	.+38     	; 0x10fa <__ftoa_engine+0x19a>
    10d4:	23 95       	inc	r18
    10d6:	7e 91       	ld	r23, -X
    10d8:	73 95       	inc	r23
    10da:	7a 33       	cpi	r23, 0x3A	; 58
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__ftoa_engine+0x180>
    10de:	70 e3       	ldi	r23, 0x30	; 48
    10e0:	7c 93       	st	X, r23
    10e2:	20 13       	cpse	r18, r16
    10e4:	b8 f7       	brcc	.-18     	; 0x10d4 <__ftoa_engine+0x174>
    10e6:	7e 91       	ld	r23, -X
    10e8:	70 61       	ori	r23, 0x10	; 16
    10ea:	7d 93       	st	X+, r23
    10ec:	30 f0       	brcs	.+12     	; 0x10fa <__ftoa_engine+0x19a>
    10ee:	83 95       	inc	r24
    10f0:	71 e3       	ldi	r23, 0x31	; 49
    10f2:	7d 93       	st	X+, r23
    10f4:	70 e3       	ldi	r23, 0x30	; 48
    10f6:	2a 95       	dec	r18
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <__ftoa_engine+0x192>
    10fa:	11 24       	eor	r1, r1
    10fc:	ef 90       	pop	r14
    10fe:	ff 90       	pop	r15
    1100:	0f 91       	pop	r16
    1102:	1f 91       	pop	r17
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	99 27       	eor	r25, r25
    110a:	87 fd       	sbrc	r24, 7
    110c:	90 95       	com	r25
    110e:	08 95       	ret

00001110 <strnlen_P>:
    1110:	fc 01       	movw	r30, r24
    1112:	05 90       	lpm	r0, Z+
    1114:	61 50       	subi	r22, 0x01	; 1
    1116:	70 40       	sbci	r23, 0x00	; 0
    1118:	01 10       	cpse	r0, r1
    111a:	d8 f7       	brcc	.-10     	; 0x1112 <strnlen_P+0x2>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	8e 0f       	add	r24, r30
    1122:	9f 1f       	adc	r25, r31
    1124:	08 95       	ret

00001126 <strncmp>:
    1126:	fb 01       	movw	r30, r22
    1128:	dc 01       	movw	r26, r24
    112a:	41 50       	subi	r20, 0x01	; 1
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	30 f0       	brcs	.+12     	; 0x113c <strncmp+0x16>
    1130:	8d 91       	ld	r24, X+
    1132:	01 90       	ld	r0, Z+
    1134:	80 19       	sub	r24, r0
    1136:	19 f4       	brne	.+6      	; 0x113e <strncmp+0x18>
    1138:	00 20       	and	r0, r0
    113a:	b9 f7       	brne	.-18     	; 0x112a <strncmp+0x4>
    113c:	88 1b       	sub	r24, r24
    113e:	99 0b       	sbc	r25, r25
    1140:	08 95       	ret

00001142 <strnlen>:
    1142:	fc 01       	movw	r30, r24
    1144:	61 50       	subi	r22, 0x01	; 1
    1146:	70 40       	sbci	r23, 0x00	; 0
    1148:	01 90       	ld	r0, Z+
    114a:	01 10       	cpse	r0, r1
    114c:	d8 f7       	brcc	.-10     	; 0x1144 <strnlen+0x2>
    114e:	80 95       	com	r24
    1150:	90 95       	com	r25
    1152:	8e 0f       	add	r24, r30
    1154:	9f 1f       	adc	r25, r31
    1156:	08 95       	ret

00001158 <fputc>:
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	fb 01       	movw	r30, r22
    1162:	23 81       	ldd	r18, Z+3	; 0x03
    1164:	21 fd       	sbrc	r18, 1
    1166:	03 c0       	rjmp	.+6      	; 0x116e <fputc+0x16>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	2c c0       	rjmp	.+88     	; 0x11c6 <fputc+0x6e>
    116e:	22 ff       	sbrs	r18, 2
    1170:	16 c0       	rjmp	.+44     	; 0x119e <fputc+0x46>
    1172:	46 81       	ldd	r20, Z+6	; 0x06
    1174:	57 81       	ldd	r21, Z+7	; 0x07
    1176:	24 81       	ldd	r18, Z+4	; 0x04
    1178:	35 81       	ldd	r19, Z+5	; 0x05
    117a:	42 17       	cp	r20, r18
    117c:	53 07       	cpc	r21, r19
    117e:	44 f4       	brge	.+16     	; 0x1190 <fputc+0x38>
    1180:	a0 81       	ld	r26, Z
    1182:	b1 81       	ldd	r27, Z+1	; 0x01
    1184:	9d 01       	movw	r18, r26
    1186:	2f 5f       	subi	r18, 0xFF	; 255
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	31 83       	std	Z+1, r19	; 0x01
    118c:	20 83       	st	Z, r18
    118e:	8c 93       	st	X, r24
    1190:	26 81       	ldd	r18, Z+6	; 0x06
    1192:	37 81       	ldd	r19, Z+7	; 0x07
    1194:	2f 5f       	subi	r18, 0xFF	; 255
    1196:	3f 4f       	sbci	r19, 0xFF	; 255
    1198:	37 83       	std	Z+7, r19	; 0x07
    119a:	26 83       	std	Z+6, r18	; 0x06
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <fputc+0x6e>
    119e:	8b 01       	movw	r16, r22
    11a0:	ec 01       	movw	r28, r24
    11a2:	fb 01       	movw	r30, r22
    11a4:	00 84       	ldd	r0, Z+8	; 0x08
    11a6:	f1 85       	ldd	r31, Z+9	; 0x09
    11a8:	e0 2d       	mov	r30, r0
    11aa:	09 95       	icall
    11ac:	89 2b       	or	r24, r25
    11ae:	e1 f6       	brne	.-72     	; 0x1168 <fputc+0x10>
    11b0:	d8 01       	movw	r26, r16
    11b2:	16 96       	adiw	r26, 0x06	; 6
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	17 97       	sbiw	r26, 0x07	; 7
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	17 96       	adiw	r26, 0x07	; 7
    11be:	9c 93       	st	X, r25
    11c0:	8e 93       	st	-X, r24
    11c2:	16 97       	sbiw	r26, 0x06	; 6
    11c4:	ce 01       	movw	r24, r28
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	08 95       	ret

000011d0 <sprintf>:
    11d0:	ae e0       	ldi	r26, 0x0E	; 14
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ee ee       	ldi	r30, 0xEE	; 238
    11d6:	f8 e0       	ldi	r31, 0x08	; 8
    11d8:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__prologue_saves__+0x1c>
    11dc:	0d 89       	ldd	r16, Y+21	; 0x15
    11de:	1e 89       	ldd	r17, Y+22	; 0x16
    11e0:	86 e0       	ldi	r24, 0x06	; 6
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	1a 83       	std	Y+2, r17	; 0x02
    11e6:	09 83       	std	Y+1, r16	; 0x01
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
    11ea:	9f e7       	ldi	r25, 0x7F	; 127
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	ae 01       	movw	r20, r28
    11f2:	47 5e       	subi	r20, 0xE7	; 231
    11f4:	5f 4f       	sbci	r21, 0xFF	; 255
    11f6:	6f 89       	ldd	r22, Y+23	; 0x17
    11f8:	78 8d       	ldd	r23, Y+24	; 0x18
    11fa:	ce 01       	movw	r24, r28
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	0e 94 ba 03 	call	0x774	; 0x774 <vfprintf>
    1202:	ef 81       	ldd	r30, Y+7	; 0x07
    1204:	f8 85       	ldd	r31, Y+8	; 0x08
    1206:	e0 0f       	add	r30, r16
    1208:	f1 1f       	adc	r31, r17
    120a:	10 82       	st	Z, r1
    120c:	2e 96       	adiw	r28, 0x0e	; 14
    120e:	e4 e0       	ldi	r30, 0x04	; 4
    1210:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__epilogue_restores__+0x1c>

00001214 <__ultoa_invert>:
    1214:	fa 01       	movw	r30, r20
    1216:	aa 27       	eor	r26, r26
    1218:	28 30       	cpi	r18, 0x08	; 8
    121a:	51 f1       	breq	.+84     	; 0x1270 <__ultoa_invert+0x5c>
    121c:	20 31       	cpi	r18, 0x10	; 16
    121e:	81 f1       	breq	.+96     	; 0x1280 <__ultoa_invert+0x6c>
    1220:	e8 94       	clt
    1222:	6f 93       	push	r22
    1224:	6e 7f       	andi	r22, 0xFE	; 254
    1226:	6e 5f       	subi	r22, 0xFE	; 254
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	af 4f       	sbci	r26, 0xFF	; 255
    1230:	b1 e0       	ldi	r27, 0x01	; 1
    1232:	3e d0       	rcall	.+124    	; 0x12b0 <__ultoa_invert+0x9c>
    1234:	b4 e0       	ldi	r27, 0x04	; 4
    1236:	3c d0       	rcall	.+120    	; 0x12b0 <__ultoa_invert+0x9c>
    1238:	67 0f       	add	r22, r23
    123a:	78 1f       	adc	r23, r24
    123c:	89 1f       	adc	r24, r25
    123e:	9a 1f       	adc	r25, r26
    1240:	a1 1d       	adc	r26, r1
    1242:	68 0f       	add	r22, r24
    1244:	79 1f       	adc	r23, r25
    1246:	8a 1f       	adc	r24, r26
    1248:	91 1d       	adc	r25, r1
    124a:	a1 1d       	adc	r26, r1
    124c:	6a 0f       	add	r22, r26
    124e:	71 1d       	adc	r23, r1
    1250:	81 1d       	adc	r24, r1
    1252:	91 1d       	adc	r25, r1
    1254:	a1 1d       	adc	r26, r1
    1256:	20 d0       	rcall	.+64     	; 0x1298 <__ultoa_invert+0x84>
    1258:	09 f4       	brne	.+2      	; 0x125c <__ultoa_invert+0x48>
    125a:	68 94       	set
    125c:	3f 91       	pop	r19
    125e:	2a e0       	ldi	r18, 0x0A	; 10
    1260:	26 9f       	mul	r18, r22
    1262:	11 24       	eor	r1, r1
    1264:	30 19       	sub	r19, r0
    1266:	30 5d       	subi	r19, 0xD0	; 208
    1268:	31 93       	st	Z+, r19
    126a:	de f6       	brtc	.-74     	; 0x1222 <__ultoa_invert+0xe>
    126c:	cf 01       	movw	r24, r30
    126e:	08 95       	ret
    1270:	46 2f       	mov	r20, r22
    1272:	47 70       	andi	r20, 0x07	; 7
    1274:	40 5d       	subi	r20, 0xD0	; 208
    1276:	41 93       	st	Z+, r20
    1278:	b3 e0       	ldi	r27, 0x03	; 3
    127a:	0f d0       	rcall	.+30     	; 0x129a <__ultoa_invert+0x86>
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__ultoa_invert+0x5c>
    127e:	f6 cf       	rjmp	.-20     	; 0x126c <__ultoa_invert+0x58>
    1280:	46 2f       	mov	r20, r22
    1282:	4f 70       	andi	r20, 0x0F	; 15
    1284:	40 5d       	subi	r20, 0xD0	; 208
    1286:	4a 33       	cpi	r20, 0x3A	; 58
    1288:	18 f0       	brcs	.+6      	; 0x1290 <__ultoa_invert+0x7c>
    128a:	49 5d       	subi	r20, 0xD9	; 217
    128c:	31 fd       	sbrc	r19, 1
    128e:	40 52       	subi	r20, 0x20	; 32
    1290:	41 93       	st	Z+, r20
    1292:	02 d0       	rcall	.+4      	; 0x1298 <__ultoa_invert+0x84>
    1294:	a9 f7       	brne	.-22     	; 0x1280 <__ultoa_invert+0x6c>
    1296:	ea cf       	rjmp	.-44     	; 0x126c <__ultoa_invert+0x58>
    1298:	b4 e0       	ldi	r27, 0x04	; 4
    129a:	a6 95       	lsr	r26
    129c:	97 95       	ror	r25
    129e:	87 95       	ror	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	ba 95       	dec	r27
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__ultoa_invert+0x86>
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	61 05       	cpc	r22, r1
    12ac:	71 05       	cpc	r23, r1
    12ae:	08 95       	ret
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	0a 2e       	mov	r0, r26
    12b6:	06 94       	lsr	r0
    12b8:	57 95       	ror	r21
    12ba:	47 95       	ror	r20
    12bc:	37 95       	ror	r19
    12be:	27 95       	ror	r18
    12c0:	ba 95       	dec	r27
    12c2:	c9 f7       	brne	.-14     	; 0x12b6 <__ultoa_invert+0xa2>
    12c4:	62 0f       	add	r22, r18
    12c6:	73 1f       	adc	r23, r19
    12c8:	84 1f       	adc	r24, r20
    12ca:	95 1f       	adc	r25, r21
    12cc:	a0 1d       	adc	r26, r0
    12ce:	08 95       	ret

000012d0 <_exit>:
    12d0:	f8 94       	cli

000012d2 <__stop_program>:
    12d2:	ff cf       	rjmp	.-2      	; 0x12d2 <__stop_program>
